
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

package ParserUFE;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.LinkedList;
import java.awt.Color;
import MyObjects.MyError.MyErrorType;
import MyObjects.MyError.Phase;
import MyObjects.MyError;
import UfeNodes.*;
import UfeNodes.Ufex.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\004\003\000\002\004\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\005\007\000\002\006\005\000\002\007" +
    "\014\000\002\007\014\000\002\010\011\000\002\011\003" +
    "\000\002\011\002\000\002\012\003\000\002\012\004\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\005\000\002\033\003\000\002\033\005\000" +
    "\002\034\005\000\002\034\003\000\002\016\006\000\002" +
    "\015\010\000\002\015\011\000\002\017\011\000\002\044" +
    "\007\000\002\035\007\000\002\036\005\000\002\037\007" +
    "\000\002\040\011\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\042\007\000\002\043\007\000\002" +
    "\032\003\000\002\032\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\021\003\000\002\022\006\000\002\024\004" +
    "\000\002\025\004\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\031\005\000\002\045\003\000" +
    "\002\045\002\000\002\046\004\000\002\046\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\054\010\000\002\055\010\000" +
    "\002\056\010\000\002\057\010\000\002\060\015\000\002" +
    "\061\010\000\002\061\010\000\002\061\007\000\002\062" +
    "\005\000\002\063\004\000\002\047\003\000\002\047\002" +
    "\000\002\050\004\000\002\050\003\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\004\000\002\052\003\000\002" +
    "\052\005\000\002\064\003\000\002\064\002\000\002\065" +
    "\004\000\002\065\004\000\002\065\003\000\002\065\003" +
    "\000\002\071\005\000\002\066\003\000\002\066\002\000" +
    "\002\067\010\000\002\067\007\000\002\070\007\000\002" +
    "\070\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\016\002\uffff\004\010\005\005\007\004\010" +
    "\020\121\017\001\002\000\004\121\177\001\002\000\004" +
    "\061\157\001\002\000\016\002\ufff6\004\ufff6\005\ufff6\007" +
    "\ufff6\010\ufff6\121\ufff6\001\002\000\016\002\ufff7\004\ufff7" +
    "\005\ufff7\007\ufff7\010\ufff7\121\ufff7\001\002\000\004\121" +
    "\134\001\002\000\016\002\ufff5\004\ufff5\005\ufff5\007\ufff5" +
    "\010\ufff5\121\ufff5\001\002\000\016\002\001\004\010\005" +
    "\005\007\004\010\020\121\017\001\002\000\016\002\ufff8" +
    "\004\ufff8\005\ufff8\007\ufff8\010\ufff8\121\ufff8\001\002\000" +
    "\016\002\ufff9\004\ufff9\005\ufff9\007\ufff9\010\ufff9\121\ufff9" +
    "\001\002\000\016\002\ufffe\004\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\121\ufffe\001\002\000\016\002\ufffc\004\ufffc\005\ufffc" +
    "\007\ufffc\010\ufffc\121\ufffc\001\002\000\006\065\034\071" +
    "\033\001\002\000\006\112\026\121\025\001\002\000\016" +
    "\002\ufffa\004\ufffa\005\ufffa\007\ufffa\010\ufffa\121\ufffa\001" +
    "\002\000\016\002\ufffb\004\ufffb\005\ufffb\007\ufffb\010\ufffb" +
    "\121\ufffb\001\002\000\004\002\024\001\002\000\004\002" +
    "\000\001\002\000\004\011\030\001\002\000\004\070\027" +
    "\001\002\000\016\002\ufff3\004\ufff3\005\ufff3\007\ufff3\010" +
    "\ufff3\121\ufff3\001\002\000\004\112\031\001\002\000\004" +
    "\070\032\001\002\000\016\002\ufff4\004\ufff4\005\ufff4\007" +
    "\ufff4\010\ufff4\121\ufff4\001\002\000\024\061\053\074\051" +
    "\111\040\112\045\113\057\114\054\115\055\116\041\121" +
    "\042\001\002\000\024\061\053\074\051\111\040\112\045" +
    "\113\057\114\054\115\055\116\041\121\042\001\002\000" +
    "\050\062\uffcc\064\uffcc\066\uffcc\067\uffcc\070\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102" +
    "\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc" +
    "\001\002\000\050\062\uffc6\064\uffc6\066\uffc6\067\uffc6\070" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107" +
    "\uffc6\110\uffc6\001\002\000\040\066\123\073\070\074\062" +
    "\075\065\076\071\077\064\100\073\101\067\102\072\103" +
    "\076\104\077\105\066\106\061\107\075\110\063\001\002" +
    "\000\024\061\053\074\051\111\040\112\045\113\057\114" +
    "\054\115\055\116\041\121\042\001\002\000\050\062\uffbe" +
    "\064\uffbe\066\uffbe\067\uffbe\070\uffbe\073\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe" +
    "\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\001\002\000" +
    "\052\062\uffbd\064\uffbd\065\117\066\uffbd\067\uffbd\070\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101" +
    "\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd" +
    "\110\uffbd\001\002\000\050\062\uffc8\064\uffc8\066\uffc8\067" +
    "\uffc8\070\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\001\002\000\050\062\uffc7\064\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000\050\062" +
    "\uffc2\064\uffc2\066\uffc2\067\uffc2\070\uffc2\073\uffc2\074\uffc2" +
    "\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\001\002" +
    "\000\050\062\uffc5\064\uffc5\066\uffc5\067\uffc5\070\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110" +
    "\uffc5\001\002\000\050\062\uffc4\064\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4" +
    "\107\uffc4\110\uffc4\001\002\000\050\062\uffcb\064\uffcb\066" +
    "\uffcb\067\uffcb\070\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105" +
    "\uffcb\106\uffcb\107\uffcb\110\uffcb\001\002\000\024\061\053" +
    "\074\051\111\040\112\045\113\057\114\054\115\055\116" +
    "\041\121\042\001\002\000\050\062\uffca\064\uffca\066\uffca" +
    "\067\uffca\070\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077" +
    "\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca" +
    "\106\uffca\107\uffca\110\uffca\001\002\000\024\061\053\074" +
    "\051\111\040\112\045\113\057\114\054\115\055\116\041" +
    "\121\042\001\002\000\050\062\uffc1\064\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\110\uffc1\001\002\000\050\062\uffbf\064\uffbf" +
    "\066\uffbf\067\uffbf\070\uffbf\073\uffbf\074\uffbf\075\uffbf\076" +
    "\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf" +
    "\105\uffbf\106\uffbf\107\uffbf\110\uffbf\001\002\000\050\062" +
    "\uffc9\064\uffc9\066\uffc9\067\uffc9\070\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\001\002" +
    "\000\050\062\uffc0\064\uffc0\066\uffc0\067\uffc0\070\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0" +
    "\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110" +
    "\uffc0\001\002\000\040\062\074\073\070\074\062\075\065" +
    "\076\071\077\064\100\073\101\067\102\072\103\076\104" +
    "\077\105\066\106\061\107\075\110\063\001\002\000\024" +
    "\061\053\074\051\111\040\112\045\113\057\114\054\115" +
    "\055\116\041\121\042\001\002\000\024\061\053\074\051" +
    "\111\040\112\045\113\057\114\054\115\055\116\041\121" +
    "\042\001\002\000\024\061\053\074\051\111\040\112\045" +
    "\113\057\114\054\115\055\116\041\121\042\001\002\000" +
    "\024\061\053\074\051\111\040\112\045\113\057\114\054" +
    "\115\055\116\041\121\042\001\002\000\024\061\053\074" +
    "\051\111\040\112\045\113\057\114\054\115\055\116\041" +
    "\121\042\001\002\000\024\061\053\074\051\111\040\112" +
    "\045\113\057\114\054\115\055\116\041\121\042\001\002" +
    "\000\024\061\053\074\051\111\040\112\045\113\057\114" +
    "\054\115\055\116\041\121\042\001\002\000\024\061\053" +
    "\074\051\111\040\112\045\113\057\114\054\115\055\116" +
    "\041\121\042\001\002\000\024\061\053\074\051\111\040" +
    "\112\045\113\057\114\054\115\055\116\041\121\042\001" +
    "\002\000\024\061\053\074\051\111\040\112\045\113\057" +
    "\114\054\115\055\116\041\121\042\001\002\000\024\061" +
    "\053\074\051\111\040\112\045\113\057\114\054\115\055" +
    "\116\041\121\042\001\002\000\050\062\uffc3\064\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\110\uffc3\001\002\000\024\061\053" +
    "\074\051\111\040\112\045\113\057\114\054\115\055\116" +
    "\041\121\042\001\002\000\024\061\053\074\051\111\040" +
    "\112\045\113\057\114\054\115\055\116\041\121\042\001" +
    "\002\000\024\061\053\074\051\111\040\112\045\113\057" +
    "\114\054\115\055\116\041\121\042\001\002\000\034\062" +
    "\uffb5\064\uffb5\066\uffb5\067\uffb5\070\uffb5\073\070\074\062" +
    "\075\065\076\071\077\064\106\uffb5\107\uffb5\110\uffb5\001" +
    "\002\000\034\062\uffb6\064\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\073\070\074\062\075\065\076\071\077\064\106\uffb6\107" +
    "\uffb6\110\uffb6\001\002\000\050\062\uffb2\064\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\073\070\074\062\075\065\076\071\077" +
    "\064\100\073\101\067\102\072\103\076\104\077\105\066" +
    "\106\061\107\uffb2\110\063\001\002\000\034\062\uffb9\064" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\073\070\074\062\075\065" +
    "\076\071\077\064\106\uffb9\107\uffb9\110\uffb9\001\002\000" +
    "\034\062\uffb7\064\uffb7\066\uffb7\067\uffb7\070\uffb7\073\070" +
    "\074\062\075\065\076\071\077\064\106\uffb7\107\uffb7\110" +
    "\uffb7\001\002\000\050\062\uffae\064\uffae\066\uffae\067\uffae" +
    "\070\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\064\100" +
    "\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae" +
    "\107\uffae\110\uffae\001\002\000\050\062\uffac\064\uffac\066" +
    "\uffac\067\uffac\070\uffac\073\uffac\074\uffac\075\065\076\071" +
    "\077\064\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105" +
    "\uffac\106\uffac\107\uffac\110\uffac\001\002\000\034\062\uffb8" +
    "\064\uffb8\066\uffb8\067\uffb8\070\uffb8\073\070\074\062\075" +
    "\065\076\071\077\064\106\uffb8\107\uffb8\110\uffb8\001\002" +
    "\000\034\062\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\073" +
    "\070\074\062\075\065\076\071\077\064\106\uffb4\107\uffb4" +
    "\110\uffb4\001\002\000\050\062\uffaf\064\uffaf\066\uffaf\067" +
    "\uffaf\070\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\064" +
    "\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106" +
    "\uffaf\107\uffaf\110\uffaf\001\002\000\050\062\uffad\064\uffad" +
    "\066\uffad\067\uffad\070\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad" +
    "\105\uffad\106\uffad\107\uffad\110\uffad\001\002\000\050\062" +
    "\uffb1\064\uffb1\066\uffb1\067\uffb1\070\uffb1\073\070\074\062" +
    "\075\065\076\071\077\064\100\073\101\067\102\072\103" +
    "\076\104\077\105\066\106\uffb1\107\uffb1\110\uffb1\001\002" +
    "\000\050\062\uffb0\064\uffb0\066\uffb0\067\uffb0\070\uffb0\073" +
    "\uffb0\074\uffb0\075\065\076\071\077\064\100\uffb0\101\uffb0" +
    "\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110" +
    "\uffb0\001\002\000\050\062\uffb3\064\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\073\070\074\062\075\065\076\071\077\064\100" +
    "\073\101\067\102\072\103\076\104\077\105\066\106\uffb3" +
    "\107\uffb3\110\063\001\002\000\050\062\uffba\064\uffba\066" +
    "\uffba\067\uffba\070\uffba\073\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105" +
    "\uffba\106\uffba\107\uffba\110\uffba\001\002\000\024\061\053" +
    "\074\051\111\040\112\045\113\057\114\054\115\055\116" +
    "\041\121\042\001\002\000\040\066\121\073\070\074\062" +
    "\075\065\076\071\077\064\100\073\101\067\102\072\103" +
    "\076\104\077\105\066\106\061\107\075\110\063\001\002" +
    "\000\050\062\uffbc\064\uffbc\066\uffbc\067\uffbc\070\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\001\002\000\050\062\uffbb\064\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100" +
    "\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb" +
    "\107\uffbb\110\uffbb\001\002\000\004\071\124\001\002\000" +
    "\024\061\053\074\051\111\040\112\045\113\057\114\054" +
    "\115\055\116\041\121\042\001\002\000\040\070\126\073" +
    "\070\074\062\075\065\076\071\077\064\100\073\101\067" +
    "\102\072\103\076\104\077\105\066\106\061\107\075\110" +
    "\063\001\002\000\032\002\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\064" +
    "\uffd9\121\uffd9\001\002\000\040\070\130\073\070\074\062" +
    "\075\065\076\071\077\064\100\073\101\067\102\072\103" +
    "\076\104\077\105\066\106\061\107\075\110\063\001\002" +
    "\000\032\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\064\uffdc\121\uffdc" +
    "\001\002\000\016\002\ufffd\004\ufffd\005\ufffd\007\ufffd\010" +
    "\ufffd\121\ufffd\001\002\000\006\067\152\070\153\001\002" +
    "\000\006\067\uffe0\070\uffe0\001\002\000\012\065\136\067" +
    "\uffdd\070\uffdd\071\135\001\002\000\026\061\053\063\143" +
    "\074\051\111\040\112\045\113\057\114\054\115\055\116" +
    "\041\121\042\001\002\000\024\061\053\074\051\111\040" +
    "\112\045\113\057\114\054\115\055\116\041\121\042\001" +
    "\002\000\040\066\140\073\070\074\062\075\065\076\071" +
    "\077\064\100\073\101\067\102\072\103\076\104\077\105" +
    "\066\106\061\107\075\110\063\001\002\000\004\070\141" +
    "\001\002\000\032\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\064\uffdb" +
    "\121\uffdb\001\002\000\042\067\uffde\070\uffde\073\070\074" +
    "\062\075\065\076\071\077\064\100\073\101\067\102\072" +
    "\103\076\104\077\105\066\106\061\107\075\110\063\001" +
    "\002\000\024\061\053\074\051\111\040\112\045\113\057" +
    "\114\054\115\055\116\041\121\042\001\002\000\042\064" +
    "\uffce\067\uffce\073\070\074\062\075\065\076\071\077\064" +
    "\100\073\101\067\102\072\103\076\104\077\105\066\106" +
    "\061\107\075\110\063\001\002\000\006\064\147\067\146" +
    "\001\002\000\024\061\053\074\051\111\040\112\045\113" +
    "\057\114\054\115\055\116\041\121\042\001\002\000\004" +
    "\070\150\001\002\000\032\002\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\012\uffda\014\uffda\015\uffda\016\uffda" +
    "\064\uffda\121\uffda\001\002\000\042\064\uffcd\067\uffcd\073" +
    "\070\074\062\075\065\076\071\077\064\100\073\101\067" +
    "\102\072\103\076\104\077\105\066\106\061\107\075\110" +
    "\063\001\002\000\004\121\155\001\002\000\032\002\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\064\uffe1\121\uffe1\001\002\000\006" +
    "\067\uffdf\070\uffdf\001\002\000\010\067\uffdd\070\uffdd\071" +
    "\156\001\002\000\024\061\053\074\051\111\040\112\045" +
    "\113\057\114\054\115\055\116\041\121\042\001\002\000" +
    "\004\100\160\001\002\000\006\076\162\121\161\001\002" +
    "\000\004\076\171\001\002\000\004\121\163\001\002\000" +
    "\004\101\164\001\002\000\004\067\165\001\002\000\004" +
    "\121\166\001\002\000\004\062\167\001\002\000\004\070" +
    "\170\001\002\000\016\002\ufff1\004\ufff1\005\ufff1\007\ufff1" +
    "\010\ufff1\121\ufff1\001\002\000\004\101\172\001\002\000" +
    "\004\067\173\001\002\000\004\121\174\001\002\000\004" +
    "\062\175\001\002\000\004\070\176\001\002\000\016\002" +
    "\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2\121\ufff2\001\002" +
    "\000\004\061\200\001\002\000\004\062\201\001\002\000" +
    "\004\063\202\001\002\000\022\004\010\006\212\012\216" +
    "\014\220\015\223\016\213\064\uffee\121\017\001\002\000" +
    "\022\004\uffe5\006\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\064\uffe5\121\uffe5\001\002\000\022\004\uffe4\006\uffe4\012" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\064\uffe4\121\uffe4\001\002" +
    "\000\022\004\uffe7\006\uffe7\012\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\064\uffe7\121\uffe7\001\002\000\022\004\uffe6\006\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\064\uffe6\121\uffe6\001" +
    "\002\000\022\004\uffeb\006\uffeb\012\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\064\uffeb\121\uffeb\001\002\000\022\004\uffe2\006" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\064\uffe2\121\uffe2" +
    "\001\002\000\004\064\u0138\001\002\000\004\061\256\001" +
    "\002\000\004\061\252\001\002\000\022\004\uffe8\006\uffe8" +
    "\012\uffe8\014\uffe8\015\uffe8\016\uffe8\064\uffe8\121\uffe8\001" +
    "\002\000\022\004\uffe3\006\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\064\uffe3\121\uffe3\001\002\000\004\061\241\001" +
    "\002\000\022\004\uffea\006\uffea\012\uffea\014\uffea\015\uffea" +
    "\016\uffea\064\uffea\121\uffea\001\002\000\004\061\235\001" +
    "\002\000\022\004\010\006\212\012\216\014\220\015\223" +
    "\016\213\064\uffef\121\017\001\002\000\022\004\uffe9\006" +
    "\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\064\uffe9\121\uffe9" +
    "\001\002\000\004\061\225\001\002\000\022\004\uffed\006" +
    "\uffed\012\uffed\014\uffed\015\uffed\016\uffed\064\uffed\121\uffed" +
    "\001\002\000\024\061\053\074\051\111\040\112\045\113" +
    "\057\114\054\115\055\116\041\121\042\001\002\000\040" +
    "\062\227\073\070\074\062\075\065\076\071\077\064\100" +
    "\073\101\067\102\072\103\076\104\077\105\066\106\061" +
    "\107\075\110\063\001\002\000\004\063\231\001\002\000" +
    "\022\004\uffcf\006\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\064\uffcf\121\uffcf\001\002\000\022\004\010\006\212\012" +
    "\216\014\220\015\223\016\213\064\uffee\121\017\001\002" +
    "\000\004\064\233\001\002\000\024\004\uffd6\006\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\064\uffd6\121\uffd6" +
    "\001\002\000\022\004\uffec\006\uffec\012\uffec\014\uffec\015" +
    "\uffec\016\uffec\064\uffec\121\uffec\001\002\000\024\061\053" +
    "\074\051\111\040\112\045\113\057\114\054\115\055\116" +
    "\041\121\042\001\002\000\040\062\237\073\070\074\062" +
    "\075\065\076\071\077\064\100\073\101\067\102\072\103" +
    "\076\104\077\105\066\106\061\107\075\110\063\001\002" +
    "\000\004\063\231\001\002\000\022\004\uffd0\006\uffd0\012" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\064\uffd0\121\uffd0\001\002" +
    "\000\024\061\053\074\051\111\040\112\045\113\057\114" +
    "\054\115\055\116\041\121\042\001\002\000\040\062\243" +
    "\073\070\074\062\075\065\076\071\077\064\100\073\101" +
    "\067\102\072\103\076\104\077\105\066\106\061\107\075" +
    "\110\063\001\002\000\004\063\231\001\002\000\024\004" +
    "\uffd5\006\uffd5\012\uffd5\013\245\014\uffd5\015\uffd5\016\uffd5" +
    "\064\uffd5\121\uffd5\001\002\000\006\012\216\063\231\001" +
    "\002\000\022\004\uffd4\006\uffd4\012\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\064\uffd4\121\uffd4\001\002\000\022\004\uffd2\006" +
    "\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\064\uffd2\121\uffd2" +
    "\001\002\000\022\004\uffd1\006\uffd1\012\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\064\uffd1\121\uffd1\001\002\000\022\004\uffd3" +
    "\006\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\064\uffd3\121" +
    "\uffd3\001\002\000\024\061\053\074\051\111\040\112\045" +
    "\113\057\114\054\115\055\116\041\121\042\001\002\000" +
    "\040\062\254\073\070\074\062\075\065\076\071\077\064" +
    "\100\073\101\067\102\072\103\076\104\077\105\066\106" +
    "\061\107\075\110\063\001\002\000\004\070\255\001\002" +
    "\000\022\004\uffd7\006\uffd7\012\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\064\uffd7\121\uffd7\001\002\000\024\033\275\034\300" +
    "\035\266\036\262\037\274\040\301\041\261\060\263\062" +
    "\uffaa\001\002\000\026\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\045\uffa4\060\uffa4\062\uffa4\001" +
    "\002\000\026\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\045\uffa0\060\uffa0\062\uffa0\001\002\000" +
    "\034\017\315\020\306\021\305\022\313\023\316\024\303" +
    "\025\302\026\317\027\311\030\320\031\307\032\314\101" +
    "\uff94\001\002\000\034\017\315\020\306\021\305\022\313" +
    "\023\316\024\303\025\302\026\317\027\311\030\320\031" +
    "\307\032\314\101\uff94\001\002\000\004\101\u0130\001\002" +
    "\000\004\062\u012e\001\002\000\026\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\045\uffa2\060\uffa2" +
    "\062\uffa2\001\002\000\034\017\315\020\306\021\305\022" +
    "\313\023\316\024\303\025\302\026\317\027\311\030\320" +
    "\031\307\032\314\101\uff94\001\002\000\026\033\275\034" +
    "\300\035\266\036\262\037\274\040\301\041\261\045\uffab" +
    "\060\263\062\uffab\001\002\000\026\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\045\uffa7\060\uffa7" +
    "\062\uffa7\001\002\000\026\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\045\uffa6\060\uffa6\062\uffa6" +
    "\001\002\000\026\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\045\uffa1\060\uffa1\062\uffa1\001\002" +
    "\000\026\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\045\uffa5\060\uffa5\062\uffa5\001\002\000\034" +
    "\017\315\020\306\021\305\022\313\023\316\024\303\025" +
    "\302\026\317\027\311\030\320\031\307\032\314\101\uff94" +
    "\001\002\000\034\017\315\020\306\021\305\022\313\023" +
    "\316\024\303\025\302\026\317\027\311\030\320\031\307" +
    "\032\314\101\uff94\001\002\000\026\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\045\uffa3\060\uffa3" +
    "\062\uffa3\001\002\000\026\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\045\uffa8\060\uffa8\062\uffa8" +
    "\001\002\000\034\017\315\020\306\021\305\022\313\023" +
    "\316\024\303\025\302\026\317\027\311\030\320\031\307" +
    "\032\314\101\uff94\001\002\000\034\017\315\020\306\021" +
    "\305\022\313\023\316\024\303\025\302\026\317\027\311" +
    "\030\320\031\307\032\314\101\uff94\001\002\000\004\071" +
    "\375\001\002\000\004\071\373\001\002\000\034\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\101\uff92\001\002" +
    "\000\004\071\371\001\002\000\004\071\367\001\002\000" +
    "\004\071\365\001\002\000\004\101\351\001\002\000\004" +
    "\071\347\001\002\000\034\017\315\020\306\021\305\022" +
    "\313\023\316\024\303\025\302\026\317\027\311\030\320" +
    "\031\307\032\314\101\uff95\001\002\000\004\071\344\001" +
    "\002\000\004\071\342\001\002\000\004\071\340\001\002" +
    "\000\004\071\336\001\002\000\004\071\334\001\002\000" +
    "\004\071\321\001\002\000\016\063\330\074\325\112\327" +
    "\114\323\117\322\121\326\001\002\000\034\017\uff81\020" +
    "\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81" +
    "\027\uff81\030\uff81\031\uff81\032\uff81\101\uff81\001\002\000" +
    "\034\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83" +
    "\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\101" +
    "\uff83\001\002\000\034\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031" +
    "\uff88\032\uff88\101\uff88\001\002\000\004\114\333\001\002" +
    "\000\034\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84" +
    "\101\uff84\001\002\000\034\017\uff85\020\uff85\021\uff85\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\101\uff85\001\002\000\024\061\053\074" +
    "\051\111\040\112\045\113\057\114\054\115\055\116\041" +
    "\121\042\001\002\000\040\064\332\073\070\074\062\075" +
    "\065\076\071\077\064\100\073\101\067\102\072\103\076" +
    "\104\077\105\066\106\061\107\075\110\063\001\002\000" +
    "\034\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\101" +
    "\uff80\001\002\000\034\017\uff82\020\uff82\021\uff82\022\uff82" +
    "\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\101\uff82\001\002\000\016\063\330\074\325" +
    "\112\327\114\323\117\322\121\326\001\002\000\034\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\101\uff8a\001" +
    "\002\000\016\063\330\074\325\112\327\114\323\117\322" +
    "\121\326\001\002\000\034\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\101\uff8e\001\002\000\016\063\330\074" +
    "\325\112\327\114\323\117\322\121\326\001\002\000\034" +
    "\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\101\uff91" +
    "\001\002\000\016\063\330\074\325\112\327\114\323\117" +
    "\322\121\326\001\002\000\034\017\uff86\020\uff86\021\uff86" +
    "\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\uff86\101\uff86\001\002\000\016\063\330" +
    "\074\325\112\327\114\323\117\322\121\326\001\002\000" +
    "\034\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\101" +
    "\uff8d\001\002\000\034\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\101\uff93\001\002\000\016\063\330\074\325" +
    "\112\327\114\323\117\322\121\326\001\002\000\034\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\101\uff89\001" +
    "\002\000\010\052\354\063\355\120\353\001\002\000\004" +
    "\052\363\001\002\000\004\052\361\001\002\000\004\101" +
    "\360\001\002\000\024\061\053\074\051\111\040\112\045" +
    "\113\057\114\054\115\055\116\041\121\042\001\002\000" +
    "\040\064\357\073\070\074\062\075\065\076\071\077\064" +
    "\100\073\101\067\102\072\103\076\104\077\105\066\106" +
    "\061\107\075\110\063\001\002\000\022\046\uff79\047\uff79" +
    "\050\uff79\052\uff79\055\uff79\056\uff79\063\uff79\120\uff79\001" +
    "\002\000\026\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\045\uff98\060\uff98\062\uff98\001\002\000" +
    "\004\101\362\001\002\000\026\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\045\uff99\060\uff99\062" +
    "\uff99\001\002\000\004\101\364\001\002\000\026\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\045" +
    "\uff9a\060\uff9a\062\uff9a\001\002\000\016\063\330\074\325" +
    "\112\327\114\323\117\322\121\326\001\002\000\034\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\101\uff87\001" +
    "\002\000\016\063\330\074\325\112\327\114\323\117\322" +
    "\121\326\001\002\000\034\017\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\101\uff90\001\002\000\016\063\330\074" +
    "\325\112\327\114\323\117\322\121\326\001\002\000\034" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\101\uff8f" +
    "\001\002\000\016\063\330\074\325\112\327\114\323\117" +
    "\322\121\326\001\002\000\034\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\101\uff8c\001\002\000\016\063\330" +
    "\074\325\112\327\114\323\117\322\121\326\001\002\000" +
    "\034\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\101" +
    "\uff8b\001\002\000\004\101\u0100\001\002\000\010\046\uff7e" +
    "\063\355\120\u0104\001\002\000\004\046\u0107\001\002\000" +
    "\020\046\uff7f\047\uff7f\050\uff7f\055\uff7f\056\uff7f\063\355" +
    "\120\u0106\001\002\000\020\046\uff7a\047\uff7a\050\uff7a\055" +
    "\uff7a\056\uff7a\063\uff7a\120\uff7a\001\002\000\020\046\uff7b" +
    "\047\uff7b\050\uff7b\055\uff7b\056\uff7b\063\uff7b\120\uff7b\001" +
    "\002\000\020\046\uff7c\047\uff7c\050\uff7c\055\uff7c\056\uff7c" +
    "\063\uff7c\120\uff7c\001\002\000\020\046\uff7d\047\uff7d\050" +
    "\uff7d\055\uff7d\056\uff7d\063\uff7d\120\uff7d\001\002\000\004" +
    "\101\u0108\001\002\000\026\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\045\uff9e\060\uff9e\062\uff9e" +
    "\001\002\000\004\101\u010a\001\002\000\024\033\275\034" +
    "\300\035\266\036\262\037\274\040\301\041\261\045\uffaa" +
    "\060\263\001\002\000\004\045\u010c\001\002\000\004\101" +
    "\u010d\001\002\000\026\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\045\uff9f\060\uff9f\062\uff9f\001" +
    "\002\000\004\101\u010f\001\002\000\004\042\u0110\001\002" +
    "\000\004\101\u0111\001\002\000\006\043\u0113\054\uff77\001" +
    "\002\000\006\043\u0123\054\uff78\001\002\000\004\101\u011f" +
    "\001\002\000\004\054\u0115\001\002\000\004\101\u0116\001" +
    "\002\000\006\044\u0117\051\uff73\001\002\000\004\101\u011b" +
    "\001\002\000\004\051\u0119\001\002\000\004\101\u011a\001" +
    "\002\000\026\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\045\uff9b\060\uff9b\062\uff9b\001\002\000" +
    "\010\056\uff7e\063\355\120\u0104\001\002\000\004\056\u011d" +
    "\001\002\000\004\101\u011e\001\002\000\004\051\uff74\001" +
    "\002\000\010\055\uff7e\063\355\120\u0104\001\002\000\004" +
    "\055\u0121\001\002\000\004\101\u0122\001\002\000\006\043" +
    "\uff75\054\uff75\001\002\000\004\101\u0124\001\002\000\010" +
    "\055\uff7e\063\355\120\u0104\001\002\000\004\055\u0126\001" +
    "\002\000\004\101\u0127\001\002\000\006\043\uff76\054\uff76" +
    "\001\002\000\026\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\045\uffa9\060\uffa9\062\uffa9\001\002" +
    "\000\004\101\u012a\001\002\000\010\047\uff7e\063\355\120" +
    "\u0104\001\002\000\004\047\u012c\001\002\000\004\101\u012d" +
    "\001\002\000\026\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\045\uff9d\060\uff9d\062\uff9d\001\002" +
    "\000\004\070\u012f\001\002\000\022\004\uffd8\006\uffd8\012" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\064\uffd8\121\uffd8\001\002" +
    "\000\026\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\045\uff96\060\uff96\062\uff96\001\002\000\004" +
    "\101\u0132\001\002\000\010\050\uff7e\063\355\120\u0104\001" +
    "\002\000\004\050\u0134\001\002\000\004\101\u0135\001\002" +
    "\000\026\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\045\uff9c\060\uff9c\062\uff9c\001\002\000\004" +
    "\101\u0137\001\002\000\026\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\045\uff97\060\uff97\062\uff97" +
    "\001\002\000\016\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010" +
    "\ufff0\121\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\030\002\022\003\014\004\011\005\012\006" +
    "\006\007\005\010\010\014\015\015\020\016\021\017\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\131\034\132\001\001" +
    "\000\002\001\001\000\024\003\130\005\012\006\006\007" +
    "\005\010\010\014\015\015\020\016\021\017\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\126\021\047\022\051\023\034\024\055\025\042" +
    "\026\043\027\035\030\045\031\046\001\001\000\026\020" +
    "\036\021\047\022\051\023\034\024\055\025\042\026\043" +
    "\027\035\030\045\031\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\121\021\047" +
    "\022\051\023\034\024\055\025\042\026\043\027\035\030" +
    "\045\031\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\115\021\047\022\051\023\034\024\055\025\042\026" +
    "\043\027\035\030\045\031\046\001\001\000\002\001\001" +
    "\000\026\020\057\021\047\022\051\023\034\024\055\025" +
    "\042\026\043\027\035\030\045\031\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\020\114\021\047\022\051" +
    "\023\034\024\055\025\042\026\043\027\035\030\045\031" +
    "\046\001\001\000\026\020\113\021\047\022\051\023\034" +
    "\024\055\025\042\026\043\027\035\030\045\031\046\001" +
    "\001\000\026\020\112\021\047\022\051\023\034\024\055" +
    "\025\042\026\043\027\035\030\045\031\046\001\001\000" +
    "\026\020\111\021\047\022\051\023\034\024\055\025\042" +
    "\026\043\027\035\030\045\031\046\001\001\000\026\020" +
    "\110\021\047\022\051\023\034\024\055\025\042\026\043" +
    "\027\035\030\045\031\046\001\001\000\026\020\107\021" +
    "\047\022\051\023\034\024\055\025\042\026\043\027\035" +
    "\030\045\031\046\001\001\000\026\020\106\021\047\022" +
    "\051\023\034\024\055\025\042\026\043\027\035\030\045" +
    "\031\046\001\001\000\026\020\105\021\047\022\051\023" +
    "\034\024\055\025\042\026\043\027\035\030\045\031\046" +
    "\001\001\000\026\020\104\021\047\022\051\023\034\024" +
    "\055\025\042\026\043\027\035\030\045\031\046\001\001" +
    "\000\026\020\103\021\047\022\051\023\034\024\055\025" +
    "\042\026\043\027\035\030\045\031\046\001\001\000\026" +
    "\020\102\021\047\022\051\023\034\024\055\025\042\026" +
    "\043\027\035\030\045\031\046\001\001\000\002\001\001" +
    "\000\026\020\101\021\047\022\051\023\034\024\055\025" +
    "\042\026\043\027\035\030\045\031\046\001\001\000\026" +
    "\020\100\021\047\022\051\023\034\024\055\025\042\026" +
    "\043\027\035\030\045\031\046\001\001\000\026\020\077" +
    "\021\047\022\051\023\034\024\055\025\042\026\043\027" +
    "\035\030\045\031\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\117\021\047\022\051\023\034\024" +
    "\055\025\042\026\043\027\035\030\045\031\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\124\021\047\022\051\023\034" +
    "\024\055\025\042\026\043\027\035\030\045\031\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\141\021\047" +
    "\022\051\023\034\024\055\025\042\026\043\027\035\030" +
    "\045\031\046\001\001\000\026\020\136\021\047\022\051" +
    "\023\034\024\055\025\042\026\043\027\035\030\045\031" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\020\143\021\047\022" +
    "\051\023\034\024\055\025\042\026\043\027\035\030\045" +
    "\031\046\032\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\020\150\021\047\022\051\023\034\024\055" +
    "\025\042\026\043\027\035\030\045\031\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\141\021\047\022\051\023\034" +
    "\024\055\025\042\026\043\027\035\030\045\031\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\011\210\012\220\013\223\014\206\015\221\016\216" +
    "\017\213\035\204\037\203\040\202\042\214\043\207\044" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\013\233\014\206" +
    "\015\221\016\216\017\213\035\204\037\203\040\202\042" +
    "\214\043\207\044\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\020\225\021\047\022" +
    "\051\023\034\024\055\025\042\026\043\027\035\030\045" +
    "\031\046\001\001\000\002\001\001\000\004\036\227\001" +
    "\001\000\002\001\001\000\034\011\231\012\220\013\223" +
    "\014\206\015\221\016\216\017\213\035\204\037\203\040" +
    "\202\042\214\043\207\044\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\235\021" +
    "\047\022\051\023\034\024\055\025\042\026\043\027\035" +
    "\030\045\031\046\001\001\000\002\001\001\000\004\036" +
    "\237\001\001\000\002\001\001\000\026\020\241\021\047" +
    "\022\051\023\034\024\055\025\042\026\043\027\035\030" +
    "\045\031\046\001\001\000\002\001\001\000\004\036\243" +
    "\001\001\000\002\001\001\000\012\036\250\037\246\040" +
    "\247\041\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\252\021" +
    "\047\022\051\023\034\024\055\025\042\026\043\027\035" +
    "\030\045\031\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\045\263\046\266\053\276" +
    "\054\267\055\270\056\272\057\256\060\275\061\264\062" +
    "\271\063\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\u0135\050\311\051\303\001\001\000\010\047" +
    "\u0130\050\311\051\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\047\u0128\050\311\051" +
    "\303\001\001\000\024\053\u0127\054\267\055\270\056\272" +
    "\057\256\060\275\061\264\062\271\063\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\047\u010d\050\311\051\303\001\001\000" +
    "\010\047\u0108\050\311\051\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\376\050\311\051\303\001" +
    "\001\000\010\047\307\050\311\051\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\330\021\047\022\051\023\034\024\055\025\042" +
    "\026\043\027\035\030\045\031\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\334" +
    "\001\001\000\002\001\001\000\004\052\336\001\001\000" +
    "\002\001\001\000\004\052\340\001\001\000\002\001\001" +
    "\000\004\052\342\001\001\000\002\001\001\000\004\052" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\347\001\001\000\002\001\001\000\004\071\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\355\021\047\022\051\023\034\024\055\025" +
    "\042\026\043\027\035\030\045\031\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\365\001\001\000\002\001\001\000\004\052" +
    "\367\001\001\000\002\001\001\000\004\052\371\001\001" +
    "\000\002\001\001\000\004\052\373\001\001\000\002\001" +
    "\001\000\004\052\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\064\u0100\065\u0101\071\u0102\001\001\000" +
    "\002\001\001\000\004\071\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\045\u010a\046\266\053\276\054\267\055\270\056\272\057" +
    "\256\060\275\061\264\062\271\063\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\u0113" +
    "\067\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\064\u011b\065\u0101\071\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\064\u011f\065\u0101\071\u0102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\064\u0124\065\u0101\071\u0102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\064\u012a\065\u0101\071\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\064\u0132\065\u0101\071\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    if(!(getScanner() instanceof Lexer)){
        System.out.println("El escaner del UFE parser no tiene un path a un archivo");
    }
    else{
        Lexer tmp = (Lexer) getScanner();
        path = tmp.getPath();
    }

    }


    public Root root;
    
    private String path = "null"; //Chapuz minimo para evitar conflictos con null

    public void syntax_error(Symbol s)
    {        
        int linea = s.left;
        int columna = s.right;

        MyError error = new MyError(MyErrorType.SYNTAX, Phase.UFE, path, linea, columna, "Error cerca de: " + sym.terminalNames[s.sym] + 
                                    (s.value == null ? "" : ". value: [" + s.value.toString() + "]"));
        report_error(error.msg, error);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        int linea = s.left;
        int columna = s.right;
        MyError error = new MyError(MyErrorType.SYNTAX, Phase.UFE,  path, linea, columna, "Error fatal cerca de: " + sym.terminalNames[s.sym] + 
                                    (s.value == null ? "" : ". value: [" + s.value.toString() + "]"));
        report_fatal_error(error.msg + " linea: " + linea, error);
    }
    public void report_error(String message, Object info){
        MySystem.Console.println((MyError)info);
        //Pasar a consola
        //MyGui.MainJFrame.logln((MyError) info);
    }
    public void report_fatal_error(String message, Object info){
        MySystem.Console.println((MyError)info);
        root = null;
        //Pasar a consola
        //MyGui.MainJFrame.logln((MyError) info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public LinkedList<Stmt> globalStmts = new LinkedList<>();
    public LinkedList<UfeImport> ufeImports = new LinkedList<>();
    public CssImport cssImport = new CssImport(null);
    public LinkedList<Render> renders = new LinkedList<Render>();
    public LinkedList<Def> defs = new LinkedList<>();//PENDIENTE PASAR A ACTION CODE Y QUITAR EL PUBLIC

    private PropType getPropType(Integer symbol){
        switch (symbol) {
            case sym.ID:
                return PropType.ID;                
            case sym.X:
                return PropType.X;
            case sym.Y:
                return PropType.Y;
            case sym.WIDTH:
                return PropType.WIDTH;
            case sym.HEIGHT:
                return PropType.HEIGHT;
            case sym.COLOR:
                return PropType.COLOR;
            case sym.BORDER:
                return PropType.BORDER;
            case sym.CLASSNAME:
                return PropType.CLASSNAME;
            case sym.ONCLICK:
                return PropType.ONCLICK;
            case sym.MIN:
                return PropType.MIN;
            case sym.MAX:
                return PropType.MAX;
            case sym.SRC:
                return PropType.SRC;
            default:
                 throw new AssertionError("Integer symbol no es un propType valido");
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= l_glob 
            {
              Root RESULT =null;
		
             root = new Root(path, globalStmts, ufeImports, cssImport, renders, defs);
             RESULT = root;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Root start_val = (Root)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= 
            {
              Root RESULT =null;
		
            root = new Root(path, globalStmts, ufeImports, cssImport, renders, defs);
            RESULT = root;
            System.out.println("parser ufe: root vacia");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // l_glob ::= glob 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_glob",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // l_glob ::= l_glob glob 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_glob",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // glob ::= decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Decl d = (Stmt.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             globalStmts.add(d);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // glob ::= assign 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Assign d = (Stmt.Assign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             globalStmts.add(d);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // glob ::= array_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.ArrayDecl d = (Stmt.ArrayDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             globalStmts.add(d);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // glob ::= array_assign 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.ArrayAssign d = (Stmt.ArrayAssign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             globalStmts.add(d);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // glob ::= ufe_import 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // glob ::= css_import 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // glob ::= render 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // glob ::= component_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("glob",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ufe_import ::= IMPORT IDENTIFIER FROM STRING_LITERAL SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       UfeImport ui = new UfeImport(id, dir);
                       ui.setLocation(tleft, tright);
                       ufeImports.add(ui);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ufe_import",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // css_import ::= IMPORT STRING_LITERAL SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      CssImport ci = new CssImport(dir);
                      ci.setLocation(tleft, tright);
                      cssImport = ci;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("css_import",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // render ::= RENDER O_PAREN LESS IDENTIFIER DIV GREATER COMMA IDENTIFIER C_PAREN SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int compIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int compIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String compId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int divIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int divIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String divId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                   Render r = new Render(compId, divId);
                   r.setLocation(tleft, tright);
                   renders.add(r);    
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("render",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // render ::= RENDER O_PAREN LESS DIV IDENTIFIER GREATER COMMA IDENTIFIER C_PAREN SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int compIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int compIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String compId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int divIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int divIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String divId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                   Render r = new Render(compId, divId);
                   r.setLocation(tleft, tright);
                   renders.add(r);    
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("render",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // component_def ::= COMPONENT IDENTIFIER O_PAREN C_PAREN O_CURLY l_stmts C_CURLY 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> statements = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        Def def = new Def(id, statements);
                        def.setLocation(idleft, idright);
                        defs.add(def);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_def",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // l_stmts ::= l_stmts$ 
            {
              LinkedList<Stmt> RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Stmt> statements = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = statements;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_stmts",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // l_stmts ::= 
            {
              LinkedList<Stmt> RESULT =null;
		
                RESULT = new LinkedList<Stmt>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_stmts",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // l_stmts$ ::= stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt statement = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new LinkedList<Stmt>();
                 RESULT.add(statement);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_stmts$",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // l_stmts$ ::= l_stmts$ stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> statements = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt statement = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = statements;
                 RESULT.add(statement);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_stmts$",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= decl 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Decl d = (Stmt.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= assign 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Assign a = (Stmt.Assign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= array_decl 
            {
              Stmt RESULT =null;
		int a_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.ArrayDecl a_d = (Stmt.ArrayDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a_d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= array_assign 
            {
              Stmt RESULT =null;
		int a_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.ArrayAssign a_a = (Stmt.ArrayAssign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a_a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= print 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Print p = (Stmt.Print)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= _return 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Return p = (Stmt.Return)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= _if_else 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt._IfElse f = (Stmt._IfElse)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= _if 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt._If f = (Stmt._If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= repeat 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Repeat r = (Stmt.Repeat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= _while 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt._While w = (Stmt._While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decl ::= VAR l_decl_items SEMICOLON 
            {
              Stmt.Decl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt.Decl.Item> items = (LinkedList<Stmt.Decl.Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Stmt.Decl(items);
            RESULT.setLocation(vleft, vright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // l_decl_items ::= decl_item 
            {
              LinkedList<Stmt.Decl.Item> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Decl.Item item = (Stmt.Decl.Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList<Stmt.Decl.Item>();
                    RESULT.add(item);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_decl_items",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // l_decl_items ::= l_decl_items COMMA decl_item 
            {
              LinkedList<Stmt.Decl.Item> RESULT =null;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Stmt.Decl.Item> items = (LinkedList<Stmt.Decl.Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Decl.Item item = (Stmt.Decl.Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = items;
                    RESULT.add(item);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_decl_items",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decl_item ::= IDENTIFIER EQ expr 
            {
              Stmt.Decl.Item RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT = new Stmt.Decl.Item(id, e);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_item",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decl_item ::= IDENTIFIER 
            {
              Stmt.Decl.Item RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT = new Stmt.Decl.Item(id, new Expr.AtomicExpr(null));
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_item",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign ::= IDENTIFIER EQ expr SEMICOLON 
            {
              Stmt.Assign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               RESULT = new Stmt.Assign(id, e);
               RESULT.setLocation(idleft, idright);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // array_decl ::= VAR IDENTIFIER O_BOX expr C_BOX SEMICOLON 
            {
              Stmt.ArrayDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                   RESULT = new Stmt.ArrayDecl(id, e);
                   RESULT.setLocation(vleft, vright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // array_decl ::= VAR IDENTIFIER EQ O_CURLY l_expr C_CURLY SEMICOLON 
            {
              Stmt.ArrayDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expr> l_e = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                   RESULT = new Stmt.ArrayDecl(id, l_e);
                   RESULT.setLocation(vleft, vright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // array_assign ::= IDENTIFIER O_BOX expr C_BOX EQ expr SEMICOLON 
            {
              Stmt.ArrayAssign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eIndexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eIndexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr eIndex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr eValue = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         RESULT = new Stmt.ArrayAssign(id, eIndex, eValue);
                         RESULT.setLocation(idleft, idright);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_assign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _return ::= RETURN O_PAREN l_comps C_PAREN SEMICOLON 
            {
              Stmt.Return RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Comp> l_c = (LinkedList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    RESULT = new Stmt.Return(l_c);
                    RESULT.setLocation(rleft, rright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // print ::= IMPRIMIR O_PAREN expr C_PAREN SEMICOLON 
            {
              Stmt.Print RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  RESULT = new Stmt.Print(e);
                  RESULT.setLocation(rleft, rright);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= O_CURLY l_stmts C_CURLY 
            {
              Stmt.Block RESULT =null;
		int o_curlyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o_curlyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o_curly = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l_s = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new Stmt.Block(l_s);
                RESULT.setLocation(o_curlyleft, o_curlyright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // _if ::= SI O_PAREN expr C_PAREN block 
            {
              Stmt._If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Block b = (Stmt.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Stmt._If(cond, b);
                RESULT.setLocation(sileft, siright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_if",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // _if_else ::= SI O_PAREN expr C_PAREN block SINO else_content 
            {
              Stmt._IfElse RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmt.Block b = (Stmt.Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		_Else e_c = (_Else)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new Stmt._IfElse(cond, b, e_c);
                 RESULT.setLocation(sileft, siright);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_if_else",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else_content ::= block 
            {
              _Else RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Block st = (Stmt.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = new _Else(st);
                         RESULT.setLocation(stleft, stright);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_content",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else_content ::= _if 
            {
              _Else RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt._If st = (Stmt._If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = new _Else(st);
                         RESULT.setLocation(stleft, stright);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_content",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // else_content ::= _if_else 
            {
              _Else RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt._IfElse st = (Stmt._IfElse)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = new _Else(st);
                         RESULT.setLocation(stleft, stright);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_content",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // repeat ::= REPETIR O_PAREN expr C_PAREN block 
            {
              Stmt.Repeat RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int limitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int limitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr limit = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Block b = (Stmt.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new Stmt.Repeat(limit, b);
                   RESULT.setLocation(rleft, rright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // _while ::= MIENTRAS O_PAREN expr C_PAREN block 
            {
              Stmt._While RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt.Block b = (Stmt.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new Stmt._While(cond, b);
                   RESULT.setLocation(rleft, rright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_while",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l_expr ::= expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new LinkedList<Expr>();
                   RESULT.add(e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // l_expr ::= l_expr COMMA expr 
            {
              LinkedList<Expr> RESULT =null;
		int l_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expr> l_e = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = l_e;
                   RESULT.add(e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= atomic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.AtomicExpr e = (Expr.AtomicExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= id_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.IdExpr e = (Expr.IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= arrayindex_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.ArrayIndexExpr e = (Expr.ArrayIndexExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= ulogic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.ULogicExpr e = (Expr.ULogicExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= uarith_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.UArithExpr e = (Expr.UArithExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= bicomp_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.BiCompExpr e = (Expr.BiCompExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= bilogic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.BiLogicExpr e = (Expr.BiLogicExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= biarith_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.BiArithExpr e = (Expr.BiArithExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= biconcat_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr.BiConcatExpr e = (Expr.BiConcatExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= O_PAREN expr C_PAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atomic_expr ::= STRING_LITERAL 
            {
              Expr.AtomicExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new Expr.AtomicExpr(val);
             RESULT.setLocation(valleft, valright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atomic_expr ::= INTEGER_LITERAL 
            {
              Expr.AtomicExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new Expr.AtomicExpr(val);
             RESULT.setLocation(valleft, valright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atomic_expr ::= DOUBLE_LITERAL 
            {
              Expr.AtomicExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new Expr.AtomicExpr(val);
             RESULT.setLocation(valleft, valright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atomic_expr ::= CHARACTER_LITERAL 
            {
              Expr.AtomicExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new Expr.AtomicExpr(val);
             RESULT.setLocation(valleft, valright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atomic_expr ::= BOOLEAN_LITERAL 
            {
              Expr.AtomicExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new Expr.AtomicExpr(val);
             RESULT.setLocation(valleft, valright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id_expr ::= IDENTIFIER 
            {
              Expr.IdExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr.IdExpr(id);
                    RESULT.setLocation(idleft, idright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arrayindex_expr ::= IDENTIFIER O_BOX expr C_BOX 
            {
              Expr.ArrayIndexExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new Expr.ArrayIndexExpr(id, e);
                            RESULT.setLocation(idleft, idright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayindex_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ulogic_expr ::= NOT expr 
            {
              Expr.ULogicExpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new Expr.ULogicExpr(Expr.ULogicOp.NOT, e);
                        RESULT.setLocation(opleft, opright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ulogic_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // uarith_expr ::= MINUS expr 
            {
              Expr.UArithExpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new Expr.UArithExpr(Expr.UArithOp.UMINUS, e);
                        RESULT.setLocation(opleft, opright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uarith_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bicomp_expr ::= expr LESS expr 
            {
              Expr.BiCompExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr.BiCompExpr(e1, Expr.BiCompOp.LESS, e2);
                    RESULT.setLocation(e1left, e1right);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bicomp_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bicomp_expr ::= expr GREATER expr 
            {
              Expr.BiCompExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr.BiCompExpr(e1, Expr.BiCompOp.GREATER, e2);
                    RESULT.setLocation(e1left, e1right);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bicomp_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bicomp_expr ::= expr LESS_EQ expr 
            {
              Expr.BiCompExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr.BiCompExpr(e1, Expr.BiCompOp.LESS_EQ, e2);
                    RESULT.setLocation(e1left, e1right);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bicomp_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bicomp_expr ::= expr GREATER_EQ expr 
            {
              Expr.BiCompExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr.BiCompExpr(e1, Expr.BiCompOp.GREATER_EQ, e2);
                    RESULT.setLocation(e1left, e1right);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bicomp_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bicomp_expr ::= expr EQ_EQ expr 
            {
              Expr.BiCompExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr.BiCompExpr(e1, Expr.BiCompOp.EQ_EQ, e2);
                    RESULT.setLocation(e1left, e1right);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bicomp_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bicomp_expr ::= expr NOT_EQ expr 
            {
              Expr.BiCompExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr.BiCompExpr(e1, Expr.BiCompOp.NOT_EQ, e2);
                    RESULT.setLocation(e1left, e1right);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bicomp_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bilogic_expr ::= expr AND expr 
            {
              Expr.BiLogicExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new Expr.BiLogicExpr(e1, Expr.BiLogicOp.AND, e2);
                     RESULT.setLocation(e1left, e1right);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bilogic_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bilogic_expr ::= expr OR expr 
            {
              Expr.BiLogicExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new Expr.BiLogicExpr(e1, Expr.BiLogicOp.OR, e2);
                     RESULT.setLocation(e1left, e1right);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bilogic_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bilogic_expr ::= expr XOR expr 
            {
              Expr.BiLogicExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new Expr.BiLogicExpr(e1, Expr.BiLogicOp.XOR, e2);
                     RESULT.setLocation(e1left, e1right);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bilogic_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // biarith_expr ::= expr MINUS expr 
            {
              Expr.BiArithExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new Expr.BiArithExpr(e1, Expr.BiArithOp.MINUS, e2);
                     RESULT.setLocation(e1left, e1right);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("biarith_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // biarith_expr ::= expr MULT expr 
            {
              Expr.BiArithExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new Expr.BiArithExpr(e1, Expr.BiArithOp.MULT, e2);
                     RESULT.setLocation(e1left, e1right);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("biarith_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // biarith_expr ::= expr DIV expr 
            {
              Expr.BiArithExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new Expr.BiArithExpr(e1, Expr.BiArithOp.DIV, e2);
                     RESULT.setLocation(e1left, e1right);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("biarith_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // biarith_expr ::= expr POW expr 
            {
              Expr.BiArithExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new Expr.BiArithExpr(e1, Expr.BiArithOp.POW, e2);
                     RESULT.setLocation(e1left, e1right);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("biarith_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // biconcat_expr ::= expr PLUS expr 
            {
              Expr.BiConcatExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT = new Expr.BiConcatExpr(e1, Expr.BiConcatOp.PLUS, e2);
                      RESULT.setLocation(e1left, e1right);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("biconcat_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // l_comps ::= l_comps$ 
            {
              LinkedList<Comp> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Comp> lp = (LinkedList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_comps",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // l_comps ::= 
            {
              LinkedList<Comp> RESULT =null;
		
                RESULT = new LinkedList<Comp>();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_comps",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // l_comps$ ::= l_comps$ comp 
            {
              LinkedList<Comp> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Comp> lp = (LinkedList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp c = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                 RESULT = lp;
                 RESULT.add(c);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_comps$",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // l_comps$ ::= comp 
            {
              LinkedList<Comp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp c = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new LinkedList<Comp>();
                RESULT.add(c);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_comps$",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comp ::= panel 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Default.Panel c = (Comp.Default.Panel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comp ::= text 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Default.Text c = (Comp.Default.Text)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comp ::= text_field 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Default.TextField c = (Comp.Default.TextField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comp ::= button 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Default.Button c = (Comp.Default.Button)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comp ::= list 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Default.List c = (Comp.Default.List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comp ::= spinner 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Default.Spinner c = (Comp.Default.Spinner)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comp ::= image 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Default.Image c = (Comp.Default.Image)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comp ::= custom 
            {
              Comp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp.Custom c = (Comp.Custom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // panel ::= PANEL_O l_props GREATER l_comps PANEL_C GREATER 
            {
              Comp.Default.Panel RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Comp> l_c = (LinkedList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              RESULT = new Comp.Default.Panel(lp, l_c);
              RESULT.setLocation(tright, tleft);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panel",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // text ::= TEXT_O l_props GREATER cnt_group TEXT_C GREATER 
            {
              Comp.Default.Text RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CntGroup cg = (CntGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                 RESULT = new Comp.Default.Text(lp, cg);
                 RESULT.setLocation(tright, tleft);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // text_field ::= TEXTFIELD_O l_props GREATER cnt_group TEXTFIELD_C GREATER 
            {
              Comp.Default.TextField RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CntGroup cg = (CntGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                       RESULT = new Comp.Default.TextField(lp, cg);
                       RESULT.setLocation(tleft, tright);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_field",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // button ::= BUTTON_O l_props GREATER cnt_group BUTTON_C GREATER 
            {
              Comp.Default.Button RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CntGroup cg = (CntGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            RESULT = new Comp.Default.Button(lp, cg);
                            RESULT.setLocation(tleft, tright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("button",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // list ::= LIST_O l_props GREATER ELEMENTS_O GREATER list_cnt ELEMENTS_C GREATER list_default LIST_C GREATER 
            {
              Comp.Default.List RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CntGroup> lc = (LinkedList<CntGroup>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CntGroup ld = (CntGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                 RESULT = new Comp.Default.List(lp, lc, ld);
                 RESULT.setLocation(tleft, tright);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // spinner ::= SPINNER_O l_props GREATER embedded_ufe SPINNER_C GREATER 
            {
              Comp.Default.Spinner RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int euright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cnt.EmbUfe eu = (Cnt.EmbUfe)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    RESULT = new Comp.Default.Spinner(lp, eu);
                    RESULT.setLocation(tleft, tright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spinner",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // spinner ::= SPINNER_O l_props GREATER PLAIN_TEXT SPINNER_C GREATER 
            {
              Comp.Default.Spinner RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    RESULT = new Comp.Default.Spinner(lp, new Cnt.PlainTxt(pt));
                    RESULT.setLocation(tleft, tright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spinner",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // spinner ::= SPINNER_O l_props GREATER SPINNER_C GREATER 
            {
              Comp.Default.Spinner RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    RESULT = new Comp.Default.Spinner(lp, new Cnt.PlainTxt(null));
                    RESULT.setLocation(tleft, tright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spinner",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // image ::= IMAGE_O l_props GREATER 
            {
              Comp.Default.Image RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = new Comp.Default.Image(lp);
              RESULT.setLocation(tleft, tright);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("image",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // custom ::= CUSTOM_C GREATER 
            {
              Comp.Custom RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   RESULT = new Comp.Custom(cc);
                   RESULT.setLocation(ccleft, ccright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("custom",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // l_props ::= l_props$ 
            {
              HashMap<PropType,PropValue> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_props",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // l_props ::= 
            {
              HashMap<PropType,PropValue> RESULT =null;
		
                    RESULT = new HashMap<PropType, PropValue>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_props",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // l_props$ ::= l_props$ prop 
            {
              HashMap<PropType,PropValue> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<PropType,PropValue> lp = (HashMap<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<PropType,PropValue> p = (SimpleEntry<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = lp;
                    RESULT.put(p.getKey(), p.getValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_props$",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // l_props$ ::= prop 
            {
              HashMap<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<PropType,PropValue> p = (SimpleEntry<PropType,PropValue>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new HashMap<PropType, PropValue>();
                    RESULT.put(p.getKey(), p.getValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_props$",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // prop ::= ID EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.ID ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // prop ::= X EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.X ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // prop ::= Y EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.Y ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // prop ::= WIDTH EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.WIDTH ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // prop ::= HEIGHT EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.HEIGHT ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // prop ::= COLOR EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.COLOR ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // prop ::= BORDER EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.BORDER ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // prop ::= CLASSNAME EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.CLASSNAME ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // prop ::= ONCLICK EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.ONCLICK ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // prop ::= MIN EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.MIN ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // prop ::= MAX EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.MAX ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // prop ::= SRC EQ prop_value 
            {
              SimpleEntry<PropType,PropValue> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropValue v = (PropValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new SimpleEntry<PropType, PropValue>(PropType.SRC ,v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // prop_value ::= STRING_LITERAL 
            {
              PropValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new PropValue.AtomicProp(s);
                   RESULT.setLocation(sleft, sright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop_value",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // prop_value ::= IDENTIFIER 
            {
              PropValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new PropValue.IdProp(s);
                   RESULT.setLocation(sleft, sright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop_value",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // prop_value ::= INTEGER_LITERAL 
            {
              PropValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new PropValue.AtomicProp(s);
                   RESULT.setLocation(sleft, sright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop_value",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // prop_value ::= MINUS INTEGER_LITERAL 
            {
              PropValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new PropValue.AtomicProp(-1 * s);
                   RESULT.setLocation(sleft, sright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop_value",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // prop_value ::= COLOR_LITERAL 
            {
              PropValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new PropValue.AtomicProp(s);
                   RESULT.setLocation(sleft, sright);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop_value",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // prop_value ::= O_CURLY expr C_CURLY 
            {
              PropValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   RESULT = new PropValue.EmbProp(e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop_value",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cnt_group ::= cnt_l 
            {
              CntGroup RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Cnt> cl = (LinkedList<Cnt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = new CntGroup(cl);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cnt_group",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cnt_group ::= 
            {
              CntGroup RESULT =null;
		
                  RESULT = new CntGroup(new LinkedList<Cnt>());
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cnt_group",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cnt_l ::= cnt_l PLAIN_TEXT 
            {
              LinkedList<Cnt> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cnt> cl = (LinkedList<Cnt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = cl;
                 Cnt.PlainTxt plainTxt = new Cnt.PlainTxt(c);
                 plainTxt.setLocation(cleft, cright);
                 RESULT.add(plainTxt);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cnt_l",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cnt_l ::= cnt_l embedded_ufe 
            {
              LinkedList<Cnt> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cnt> cl = (LinkedList<Cnt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cnt.EmbUfe c = (Cnt.EmbUfe)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = cl;
                 RESULT.add(c);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cnt_l",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cnt_l ::= PLAIN_TEXT 
            {
              LinkedList<Cnt> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new LinkedList<Cnt>();;
                 Cnt.PlainTxt plainTxt = new Cnt.PlainTxt(c);
                 plainTxt.setLocation(cleft, cright);
                 RESULT.add(plainTxt);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cnt_l",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cnt_l ::= embedded_ufe 
            {
              LinkedList<Cnt> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cnt.EmbUfe c = (Cnt.EmbUfe)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new LinkedList<Cnt>();;
                 RESULT.add(c);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cnt_l",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // embedded_ufe ::= O_CURLY expr C_CURLY 
            {
              Cnt.EmbUfe RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new Cnt.EmbUfe(e);
                     RESULT.setLocation(tleft, tright);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("embedded_ufe",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // list_cnt ::= list_cnt$ 
            {
              LinkedList<CntGroup> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<CntGroup> lc = (LinkedList<CntGroup>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_cnt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // list_cnt ::= 
            {
              LinkedList<CntGroup> RESULT =null;
		
                 RESULT = new LinkedList<CntGroup>();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_cnt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // list_cnt$ ::= list_cnt$ ITEM_O GREATER cnt_group ITEM_C GREATER 
            {
              LinkedList<CntGroup> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CntGroup> lc = (LinkedList<CntGroup>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CntGroup cg = (CntGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  RESULT = lc;
                  RESULT.add(cg);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_cnt$",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // list_cnt$ ::= ITEM_O GREATER cnt_group ITEM_C GREATER 
            {
              LinkedList<CntGroup> RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CntGroup cg = (CntGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  RESULT = new LinkedList<CntGroup>();
                  RESULT.add(cg);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_cnt$",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // list_default ::= DEFAULT_O GREATER cnt_group DEFAULT_C GREATER 
            {
              CntGroup RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CntGroup cg = (CntGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_default",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // list_default ::= 
            {
              CntGroup RESULT =null;
		 
                        RESULT = new CntGroup(new LinkedList<Cnt>());//Content group vacio
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_default",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
