/* The following code was generated by JFlex 1.7.0 */

/****************************************************************************/
/*------------------------------U-F-E scanner-------------------------------*/
/****************************************************************************/

package ParserUFE;
import java_cup.runtime.*;
import MyObjects.MyError.MyErrorType;
import MyObjects.MyError.Phase;
import MyObjects.MyError;
import MyObjects.MyFileReader;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/ParserUFE/scannerSpecification.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_STATE = 2;
  public static final int UFEX_INITIAL = 4;
  public static final int UFEX_TAG = 6;
  public static final int UFEX_PROPERTIES = 8;
  public static final int UFEX_PLAINTEXT_0 = 10;
  public static final int UFEX_PLAINTEXT_1 = 12;
  public static final int PRE_EMBEDDED_UFE_STATE = 14;
  public static final int EMBEDDED_UFE_STATE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\3\1\2\1\11\1\12\1\1\16\15\4\0\1\3\1\101"+
    "\1\64\1\16\1\14\1\0\1\102\1\10\1\65\1\66\1\5\1\76"+
    "\1\73\1\77\1\7\1\4\12\6\1\0\1\74\1\21\1\75\1\100"+
    "\2\0\1\24\1\42\1\61\1\41\1\27\1\36\1\56\1\111\1\40"+
    "\1\20\1\113\1\31\1\54\1\26\1\46\1\23\1\20\1\52\1\50"+
    "\1\33\1\44\1\60\1\63\1\35\1\107\1\20\1\71\1\105\1\72"+
    "\1\104\1\20\1\17\1\24\1\42\1\61\1\41\1\27\1\36\1\55"+
    "\1\110\1\37\1\14\1\112\1\30\1\53\1\25\1\45\1\22\1\14"+
    "\1\51\1\47\1\32\1\43\1\57\1\62\1\34\1\106\1\14\1\67"+
    "\1\103\1\70\1\0\6\15\1\13\32\15\2\0\4\14\4\0\1\14"+
    "\2\0\1\15\7\0\1\14\4\0\1\14\5\0\27\14\1\0\37\14"+
    "\1\0\70\14\2\37\115\14\1\47\u0142\14\4\0\14\14\16\0\5\14"+
    "\7\0\1\14\1\0\1\14\21\0\160\15\5\14\1\0\2\14\2\0"+
    "\4\14\10\0\1\14\1\0\3\14\1\0\1\14\1\0\24\14\1\0"+
    "\123\14\1\0\213\14\1\0\5\15\2\0\236\14\11\0\46\14\2\0"+
    "\1\14\7\0\47\14\7\0\1\14\1\0\55\15\1\0\1\15\1\0"+
    "\2\15\1\0\2\15\1\0\1\15\10\0\33\14\5\0\3\14\15\0"+
    "\5\15\6\0\1\14\4\0\13\15\5\0\53\14\37\15\4\0\2\14"+
    "\1\15\143\14\1\0\1\14\10\15\1\0\6\15\2\14\2\15\1\0"+
    "\4\15\2\14\12\15\3\14\2\0\1\14\17\0\1\15\1\14\1\15"+
    "\36\14\33\15\2\0\131\14\13\15\1\14\16\0\12\15\41\14\11\15"+
    "\2\14\4\0\1\14\5\0\26\14\4\15\1\14\11\15\1\14\3\15"+
    "\1\14\5\15\22\0\31\14\3\15\104\0\1\14\1\0\13\14\67\0"+
    "\33\15\1\0\4\15\66\14\3\15\1\14\22\15\1\14\7\15\12\14"+
    "\2\15\2\0\12\15\1\0\7\14\1\0\7\14\1\0\3\15\1\0"+
    "\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0"+
    "\4\14\2\0\1\15\1\14\7\15\2\0\2\15\2\0\3\15\1\14"+
    "\10\0\1\15\4\0\2\14\1\0\3\14\2\15\2\0\12\15\4\14"+
    "\7\0\1\14\5\0\3\15\1\0\6\14\4\0\2\14\2\0\26\14"+
    "\1\0\7\14\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\15"+
    "\1\0\5\15\4\0\2\15\2\0\3\15\3\0\1\15\7\0\4\14"+
    "\1\0\1\14\7\0\14\15\3\14\1\15\13\0\3\15\1\0\11\14"+
    "\1\0\3\14\1\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\15\1\14\10\15\1\0\3\15\1\0\3\15\2\0\1\14"+
    "\17\0\2\14\2\15\2\0\12\15\1\0\1\14\17\0\3\15\1\0"+
    "\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\15\1\14\7\15\2\0\2\15\2\0\3\15\10\0"+
    "\2\15\4\0\2\14\1\0\3\14\2\15\2\0\12\15\1\0\1\14"+
    "\20\0\1\15\1\14\1\0\6\14\3\0\3\14\1\0\4\14\3\0"+
    "\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0\3\14\3\0"+
    "\14\14\4\0\5\15\3\0\3\15\1\0\4\15\2\0\1\14\6\0"+
    "\1\15\16\0\12\15\11\0\1\14\7\0\3\15\1\0\10\14\1\0"+
    "\3\14\1\0\27\14\1\0\12\14\1\0\5\14\3\0\1\14\7\15"+
    "\1\0\3\15\1\0\4\15\7\0\2\15\1\0\2\14\6\0\2\14"+
    "\2\15\2\0\12\15\22\0\2\15\1\0\10\14\1\0\3\14\1\0"+
    "\27\14\1\0\12\14\1\0\5\14\2\0\1\15\1\14\7\15\1\0"+
    "\3\15\1\0\4\15\7\0\2\15\7\0\1\14\1\0\2\14\2\15"+
    "\2\0\12\15\1\0\2\14\17\0\2\15\1\0\10\14\1\0\3\14"+
    "\1\0\51\14\2\0\1\14\7\15\1\0\3\15\1\0\4\15\1\14"+
    "\10\0\1\15\10\0\2\14\2\15\2\0\12\15\12\0\6\14\2\0"+
    "\2\15\1\0\22\14\3\0\30\14\1\0\11\14\1\0\1\14\2\0"+
    "\7\14\3\0\1\15\4\0\6\15\1\0\1\15\1\0\10\15\22\0"+
    "\2\15\15\0\60\14\1\15\2\14\7\15\4\0\10\14\10\15\1\0"+
    "\12\15\47\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0"+
    "\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1\0"+
    "\1\14\2\0\2\14\1\0\4\14\1\15\2\14\6\15\1\0\2\15"+
    "\1\14\2\0\5\14\1\0\1\14\1\0\6\15\2\0\12\15\2\0"+
    "\4\14\40\0\1\14\27\0\2\15\6\0\12\15\13\0\1\15\1\0"+
    "\1\15\1\0\1\15\4\0\2\15\10\14\1\0\44\14\4\0\24\15"+
    "\1\0\2\15\5\14\13\15\1\0\44\15\11\0\1\15\71\0\53\14"+
    "\24\15\1\14\12\15\6\0\6\14\4\15\4\14\3\15\1\14\3\15"+
    "\2\14\7\15\3\14\4\15\15\14\14\15\1\14\17\15\2\0\46\14"+
    "\1\0\1\14\5\0\1\14\2\0\53\14\1\0\u014d\14\1\0\4\14"+
    "\2\0\7\14\1\0\1\14\1\0\4\14\2\0\51\14\1\0\4\14"+
    "\2\0\41\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\17\14\1\0\71\14\1\0\4\14\2\0\103\14\2\0\3\15"+
    "\40\0\20\14\20\0\125\14\14\0\u026c\14\2\0\21\14\1\0\32\14"+
    "\5\0\113\14\3\0\3\14\17\0\15\14\1\0\4\14\3\15\13\0"+
    "\22\14\3\15\13\0\22\14\2\15\14\0\15\14\1\0\3\14\1\0"+
    "\2\15\14\0\64\14\40\15\3\0\1\14\3\0\2\14\1\15\2\0"+
    "\12\15\41\0\3\15\2\0\12\15\6\0\130\14\10\0\51\14\1\15"+
    "\1\14\5\0\106\14\12\0\35\14\3\0\14\15\4\0\14\15\12\0"+
    "\12\15\36\14\2\0\5\14\13\0\54\14\4\0\21\15\7\14\2\15"+
    "\6\0\12\15\46\0\27\14\5\15\4\0\65\14\12\15\1\0\35\15"+
    "\2\0\13\15\6\0\12\15\15\0\1\14\130\0\5\15\57\14\21\15"+
    "\7\14\4\0\12\15\21\0\11\15\14\0\3\15\36\14\15\15\2\14"+
    "\12\15\54\14\16\15\14\0\44\14\24\15\10\0\12\15\3\0\3\14"+
    "\12\15\44\14\122\0\3\15\1\0\25\15\4\14\1\15\4\14\3\15"+
    "\2\14\11\0\300\14\47\15\25\0\4\15\u0116\14\2\0\6\14\2\0"+
    "\46\14\2\0\6\14\2\0\10\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\37\14\2\0\65\14\1\0\7\14\1\0\1\14\3\0"+
    "\3\14\1\0\7\14\3\0\4\14\2\0\6\14\4\0\15\14\5\0"+
    "\3\14\1\0\7\14\16\0\5\15\30\0\1\11\1\11\5\15\20\0"+
    "\2\14\23\0\1\14\13\0\5\15\5\0\6\15\1\0\1\14\15\0"+
    "\1\14\20\0\15\14\3\0\33\14\25\0\15\15\4\0\1\15\3\0"+
    "\14\15\21\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0"+
    "\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\1\112\3\14"+
    "\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\21\0\51\14"+
    "\u0a77\0\57\14\1\0\57\14\1\0\205\14\6\0\4\14\3\15\2\14"+
    "\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14\7\0\1\14"+
    "\17\0\1\15\27\14\11\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\40\15\57\0\1\14\u01d5\0\3\14\31\0\11\14\6\15\1\0\5\14"+
    "\2\0\5\14\4\0\126\14\2\0\2\15\2\0\3\14\1\0\132\14"+
    "\1\0\4\14\5\0\51\14\3\0\136\14\21\0\33\14\65\0\20\14"+
    "\u0200\0\u19b6\14\112\0\u51cd\14\63\0\u048d\14\103\0\56\14\2\0\u010d\14"+
    "\3\0\20\14\12\15\2\14\24\0\57\14\1\15\4\0\12\15\1\0"+
    "\31\14\7\0\1\15\120\14\2\15\45\0\11\14\2\0\147\14\2\0"+
    "\4\14\1\0\4\14\14\0\13\14\115\0\12\14\1\15\3\14\1\15"+
    "\4\14\1\15\27\14\5\15\20\0\1\14\7\0\64\14\14\0\2\15"+
    "\62\14\21\15\13\0\12\15\6\0\22\15\6\14\3\0\1\14\4\0"+
    "\12\15\34\14\10\15\2\0\27\14\15\15\14\0\35\14\3\0\4\15"+
    "\57\14\16\15\16\0\1\14\12\15\46\0\51\14\16\15\11\0\3\14"+
    "\1\15\10\14\2\15\2\0\12\15\6\0\27\14\3\0\1\14\1\15"+
    "\4\0\60\14\1\15\1\14\3\15\2\14\2\15\5\14\2\15\1\14"+
    "\1\15\1\14\30\0\3\14\2\0\13\14\5\15\2\0\3\14\2\15"+
    "\12\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\1\0\7\14"+
    "\221\0\43\14\10\15\1\0\2\15\2\0\12\15\6\0\u2ba4\14\14\0"+
    "\27\14\4\0\61\14\u2104\0\u016e\14\2\0\152\14\46\0\7\14\14\0"+
    "\5\14\5\0\1\14\1\15\12\14\1\0\15\14\1\0\5\14\1\0"+
    "\1\14\1\0\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0"+
    "\100\14\2\0\66\14\50\0\15\14\3\0\20\15\20\0\7\15\14\0"+
    "\2\14\30\0\3\14\31\0\1\14\6\0\5\14\1\0\207\14\2\0"+
    "\1\15\4\0\1\14\13\0\12\15\7\0\32\14\4\0\1\14\1\0"+
    "\32\14\13\0\131\14\3\0\6\14\2\0\6\14\2\0\6\14\2\0"+
    "\3\14\3\0\2\14\3\0\2\14\22\0\3\15\4\0\14\14\1\0"+
    "\32\14\1\0\23\14\1\0\2\14\1\0\17\14\2\0\16\14\42\0"+
    "\173\14\105\0\65\14\210\0\1\15\202\0\35\14\3\0\61\14\57\0"+
    "\37\14\21\0\33\14\65\0\36\14\2\0\44\14\4\0\10\14\1\0"+
    "\5\14\52\0\236\14\2\0\12\15\u0356\0\6\14\2\0\1\14\1\0"+
    "\54\14\1\0\2\14\3\0\1\14\2\0\27\14\252\0\26\14\12\0"+
    "\32\14\106\0\70\14\6\0\2\14\100\0\1\14\3\15\1\0\2\15"+
    "\5\0\4\15\4\14\1\0\3\14\1\0\33\14\4\0\3\15\4\0"+
    "\1\15\40\0\35\14\203\0\66\14\12\0\26\14\12\0\23\14\215\0"+
    "\111\14\u03b7\0\3\15\65\14\17\15\37\0\12\15\20\0\3\15\55\14"+
    "\13\15\2\0\1\15\22\0\31\14\7\0\12\15\6\0\3\15\44\14"+
    "\16\15\1\0\12\15\100\0\3\15\60\14\16\15\4\14\13\0\12\15"+
    "\u04a6\0\53\14\15\15\10\0\12\15\u0936\0\u036f\14\221\0\143\14\u0b9d\0"+
    "\u042f\14\u33d1\0\u0239\14\u04c7\0\105\14\13\0\1\14\56\15\20\0\4\15"+
    "\15\14\u4060\0\2\14\u2163\0\5\15\3\0\26\15\2\0\7\15\36\0"+
    "\4\15\224\0\3\15\u01bb\0\125\14\1\0\107\14\1\0\2\14\2\0"+
    "\1\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14\1\0"+
    "\7\14\1\0\101\14\1\0\4\14\2\0\10\14\1\0\7\14\1\0"+
    "\34\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\7\14\1\0"+
    "\u0154\14\2\0\31\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0"+
    "\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0"+
    "\31\14\1\0\10\14\2\0\62\15\u1600\0\4\14\1\0\33\14\1\0"+
    "\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0"+
    "\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0"+
    "\1\14\2\0\4\14\1\0\7\14\1\0\4\14\1\0\4\14\1\0"+
    "\1\14\1\0\12\14\1\0\21\14\5\0\3\14\1\0\5\14\1\0"+
    "\21\14\u1144\0\ua6d7\14\51\0\u1035\14\13\0\336\14\u3fe2\0\u021e\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\15\36\0\140\15\200\0\360\15\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\11\6\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\1\1\26\1\27\1\30\1\1\1\31\1\1\1\32"+
    "\1\5\1\1\1\33\7\6\1\34\1\35\1\21\1\36"+
    "\1\37\1\6\2\40\1\41\1\42\1\40\1\43\2\44"+
    "\1\43\1\45\1\43\1\46\2\47\1\6\1\50\1\51"+
    "\1\1\1\2\3\0\1\52\5\6\1\53\4\6\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\0\11\66\1\0\1\67\11\6\1\0\1\70"+
    "\1\71\1\0\1\72\1\73\2\0\1\74\1\75\1\76"+
    "\11\6\1\77\1\6\11\100\11\66\1\0\2\6\1\101"+
    "\1\102\1\103\4\6\1\0\1\2\1\104\1\6\1\105"+
    "\2\6\1\106\5\6\11\100\11\66\1\0\6\6\1\107"+
    "\7\6\11\100\2\66\1\110\1\111\1\112\4\66\1\0"+
    "\3\6\1\113\1\114\1\6\1\115\2\6\1\116\1\117"+
    "\2\6\2\100\1\120\1\121\1\122\4\100\1\123\2\66"+
    "\1\124\3\66\1\0\1\125\2\6\1\126\1\6\1\127"+
    "\2\6\1\130\2\100\1\131\3\100\3\66\1\132\1\66"+
    "\1\133\1\134\1\6\1\135\1\136\1\6\3\100\1\137"+
    "\1\100\2\66\1\140\1\141\1\6\1\142\2\100\1\143"+
    "\1\144\1\145\1\66\1\146\1\147\1\100\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u02ac\0\u0344\0\u02ac\0\u0390\0\u03dc"+
    "\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c"+
    "\0\u0688\0\u06d4\0\u0720\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u02ac"+
    "\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u076c\0\u02ac\0\u02ac\0\u07b8"+
    "\0\u0804\0\u0850\0\u089c\0\u02ac\0\u08e8\0\u02ac\0\u0934\0\u02ac"+
    "\0\u0980\0\u02ac\0\u09cc\0\u0a18\0\u0428\0\u0a64\0\u0ab0\0\u0afc"+
    "\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u02ac\0\u02ac\0\u02ac\0\u02ac"+
    "\0\u0428\0\u0c78\0\u02ac\0\u0cc4\0\u02ac\0\u02ac\0\u0d10\0\u02ac"+
    "\0\u0d5c\0\u02ac\0\u0da8\0\u02ac\0\u0df4\0\u02ac\0\u0e40\0\u02ac"+
    "\0\u0e8c\0\u02ac\0\u02ac\0\u076c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc"+
    "\0\u02ac\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0"+
    "\0\u121c\0\u1268\0\u12b4\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u02ac"+
    "\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u1300\0\u134c\0\u1398"+
    "\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8"+
    "\0\u0428\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c"+
    "\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u02ac\0\u1988\0\u19d4\0\u02ac"+
    "\0\u1a20\0\u1a6c\0\u0f70\0\u02ac\0\u0428\0\u1ab8\0\u1b04\0\u1b50"+
    "\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u0428\0\u1d64"+
    "\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4"+
    "\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224"+
    "\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u0428\0\u0428\0\u0428"+
    "\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u1a20\0\u0428\0\u2568"+
    "\0\u0428\0\u25b4\0\u2600\0\u0428\0\u264c\0\u2698\0\u26e4\0\u2730"+
    "\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990"+
    "\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0"+
    "\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50"+
    "\0\u2e9c\0\u2ee8\0\u0428\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u3064"+
    "\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4"+
    "\0\u3310\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u134c\0\u348c\0\u134c"+
    "\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec"+
    "\0\u0428\0\u0428\0\u3738\0\u0428\0\u3784\0\u37d0\0\u0428\0\u0428"+
    "\0\u381c\0\u3868\0\u38b4\0\u3900\0\u1db0\0\u394c\0\u1db0\0\u3998"+
    "\0\u39e4\0\u3a30\0\u3a7c\0\u134c\0\u3ac8\0\u3b14\0\u134c\0\u3b60"+
    "\0\u3bac\0\u3bf8\0\u3c44\0\u0428\0\u3c90\0\u3cdc\0\u0428\0\u3d28"+
    "\0\u0428\0\u3d74\0\u3dc0\0\u1db0\0\u3e0c\0\u3e58\0\u1db0\0\u3ea4"+
    "\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u134c\0\u406c\0\u02ac"+
    "\0\u0428\0\u40b8\0\u0428\0\u0428\0\u4104\0\u4150\0\u419c\0\u41e8"+
    "\0\u1db0\0\u4234\0\u4280\0\u42cc\0\u134c\0\u134c\0\u4318\0\u0428"+
    "\0\u4364\0\u43b0\0\u1db0\0\u1db0\0\u134c\0\u43fc\0\u0428\0\u1db0"+
    "\0\u4448\0\u134c\0\u1db0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\2\14\1\15\1\16\1\17\1\12\1\20"+
    "\1\12\1\14\1\12\1\21\3\12\1\21\1\22\2\23"+
    "\6\21\2\24\2\21\1\25\2\26\6\21\2\27\2\30"+
    "\2\31\2\21\2\32\1\33\2\21\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\12\6\21"+
    "\1\55\2\12\61\55\1\56\20\55\1\57\6\55\1\12"+
    "\1\13\2\14\6\12\1\14\52\12\1\60\27\12\1\13"+
    "\2\14\6\12\1\14\6\12\1\61\44\12\1\62\26\12"+
    "\1\13\2\14\2\12\1\63\3\12\1\14\1\12\1\21"+
    "\1\12\1\64\1\12\1\21\1\12\12\21\2\65\1\21"+
    "\2\66\1\21\1\67\2\21\2\70\2\71\2\21\2\72"+
    "\4\21\1\73\2\74\1\75\2\12\1\76\5\12\1\77"+
    "\1\12\1\47\1\100\5\12\2\101\2\102\2\21\1\103"+
    "\1\13\2\14\5\103\1\12\1\14\1\12\5\103\1\104"+
    "\44\103\1\105\1\106\15\103\1\107\6\103\1\110\1\111"+
    "\2\112\5\110\1\12\1\112\1\12\5\110\1\113\44\110"+
    "\1\105\1\114\15\110\1\115\6\110\67\12\1\116\25\12"+
    "\1\117\2\120\1\15\1\16\1\17\1\12\1\20\1\12"+
    "\1\120\1\12\1\21\3\12\1\21\1\22\2\23\6\21"+
    "\2\24\2\21\1\121\25\21\1\122\1\35\1\36\1\12"+
    "\1\123\1\41\1\42\2\12\1\124\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\12\6\21\116\0\1\14"+
    "\115\0\1\125\1\126\114\0\1\17\1\127\104\0\1\130"+
    "\2\0\6\130\3\0\100\130\6\0\1\21\4\0\3\21"+
    "\2\0\1\21\1\0\42\21\22\0\6\21\75\0\1\131"+
    "\24\0\1\21\4\0\3\21\2\0\1\21\1\0\23\21"+
    "\2\132\15\21\22\0\6\21\6\0\1\21\4\0\3\21"+
    "\2\0\1\21\1\0\27\21\2\133\11\21\22\0\6\21"+
    "\6\0\1\21\4\0\3\21\2\0\1\21\1\0\2\21"+
    "\1\134\24\21\2\135\11\21\22\0\6\21\6\0\1\21"+
    "\4\0\3\21\2\0\1\21\1\0\31\21\2\136\7\21"+
    "\22\0\6\21\6\0\1\21\4\0\3\21\2\0\1\21"+
    "\1\0\15\21\2\137\23\21\22\0\6\21\6\0\1\21"+
    "\4\0\3\21\2\0\1\21\1\0\5\21\1\140\34\21"+
    "\22\0\6\21\6\0\1\21\4\0\3\21\2\0\1\21"+
    "\1\0\15\21\2\141\23\21\22\0\6\21\6\0\1\21"+
    "\4\0\3\21\2\0\1\21\1\0\2\21\1\142\37\21"+
    "\22\0\6\21\6\0\1\21\4\0\3\21\2\0\1\21"+
    "\1\0\23\21\2\143\15\21\22\0\6\21\75\0\1\144"+
    "\113\0\1\145\113\0\1\146\120\0\1\147\114\0\1\150"+
    "\10\0\1\55\2\0\61\55\1\0\20\55\1\0\6\55"+
    "\25\0\2\151\3\0\2\152\15\0\2\153\11\0\1\154"+
    "\20\0\1\155\12\0\1\156\7\0\1\157\3\0\1\157"+
    "\1\0\2\160\3\157\1\161\2\162\2\163\3\157\2\164"+
    "\1\165\1\166\4\157\2\167\13\157\22\0\6\157\6\0"+
    "\1\63\113\0\1\170\10\0\2\170\2\0\2\170\1\0"+
    "\2\170\1\0\1\170\1\0\1\170\1\0\2\170\1\0"+
    "\3\170\1\0\1\170\1\0\1\170\1\0\1\170\1\0"+
    "\1\170\1\0\1\170\1\0\1\170\1\0\2\170\1\0"+
    "\1\170\5\0\2\170\11\0\2\170\1\0\1\170\1\0"+
    "\1\170\1\0\1\170\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\17\21\1\171\22\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\23\21\2\172"+
    "\15\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\3\21\2\173\35\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\27\21\2\174"+
    "\11\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\2\21\1\175\12\21\2\176\23\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\6\21\2\177\13\21\2\200\15\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\15\21\2\201"+
    "\23\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\5\21\1\202\34\21\22\0\6\21\4\0"+
    "\1\203\7\0\1\204\3\0\1\204\1\0\42\204\22\0"+
    "\6\204\66\0\1\205\27\0\1\112\115\0\1\206\7\0"+
    "\1\207\3\0\1\207\1\0\42\207\22\0\6\207\66\0"+
    "\1\210\27\0\1\120\117\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\2\21\1\134\37\21\22\0\6\21\1\125"+
    "\1\13\1\14\111\125\5\211\1\212\106\211\6\0\1\213"+
    "\115\0\1\214\111\0\1\21\4\0\3\21\2\0\1\21"+
    "\1\0\40\21\2\215\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\21\21\2\216\17\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\6\21\2\217\32\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\23\21\2\220\15\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\2\221\40\21\22\0\6\21\6\0\1\21\4\0\3\21"+
    "\2\0\1\21\1\0\3\21\2\222\35\21\22\0\6\21"+
    "\6\0\1\21\4\0\3\21\2\0\1\21\1\0\2\223"+
    "\1\21\2\224\3\21\2\225\30\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\5\21\1\226"+
    "\34\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\27\21\2\227\11\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\31\21\2\230"+
    "\7\21\22\0\6\21\14\0\1\231\3\0\1\231\1\0"+
    "\2\232\3\231\1\233\2\234\2\235\3\231\2\236\1\237"+
    "\1\240\4\231\2\241\13\231\22\0\6\231\6\0\1\157"+
    "\4\0\3\157\2\0\1\157\1\0\42\157\22\0\6\157"+
    "\6\0\1\157\4\0\3\157\2\0\1\157\1\0\2\157"+
    "\1\242\37\157\22\0\6\157\6\0\1\157\4\0\3\157"+
    "\2\0\1\157\1\0\6\157\2\243\32\157\22\0\6\157"+
    "\6\0\1\157\4\0\3\157\2\0\1\157\1\0\15\157"+
    "\2\244\23\157\22\0\6\157\6\0\1\157\4\0\3\157"+
    "\2\0\1\157\1\0\5\157\1\245\34\157\22\0\6\157"+
    "\6\0\1\157\4\0\3\157\2\0\1\157\1\0\10\157"+
    "\2\246\17\157\2\247\7\157\22\0\6\157\6\0\1\157"+
    "\4\0\3\157\2\0\1\157\1\0\5\157\1\250\34\157"+
    "\22\0\6\157\6\0\1\157\4\0\3\157\2\0\1\157"+
    "\1\0\21\157\2\251\17\157\22\0\6\157\6\0\1\157"+
    "\4\0\3\157\2\0\1\157\1\0\2\252\40\157\22\0"+
    "\6\157\6\0\1\253\10\0\2\253\2\0\2\253\1\0"+
    "\2\253\1\0\1\253\1\0\1\253\1\0\2\253\1\0"+
    "\3\253\1\0\1\253\1\0\1\253\1\0\1\253\1\0"+
    "\1\253\1\0\1\253\1\0\1\253\1\0\2\253\1\0"+
    "\1\253\5\0\2\253\11\0\2\253\1\0\1\253\1\0"+
    "\1\253\1\0\1\253\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\27\21\2\254\11\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\37\21\1\255"+
    "\2\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\37\21\1\256\2\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\12\21\2\257"+
    "\26\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\3\21\2\260\35\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\2\21\1\261"+
    "\37\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\6\21\2\262\32\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\17\21\1\263"+
    "\22\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\15\21\2\264\23\21\22\0\6\21\14\0"+
    "\1\204\3\0\1\204\1\0\42\204\22\0\6\204\6\0"+
    "\1\204\4\0\3\204\2\0\1\204\1\0\42\204\22\0"+
    "\6\204\14\0\1\207\3\0\1\207\1\0\42\207\22\0"+
    "\6\207\6\0\1\207\4\0\3\207\2\0\1\207\1\0"+
    "\42\207\22\0\6\207\5\211\1\265\112\211\1\266\1\265"+
    "\106\211\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\5\21\1\267\34\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\25\21\2\270\13\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\31\21\2\271\7\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\23\21\2\272\2\21\2\273"+
    "\11\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\23\21\2\274\15\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\5\21\1\275"+
    "\34\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\17\21\1\276\22\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\21\21\2\277"+
    "\17\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\3\21\2\300\35\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\2\301\40\21"+
    "\22\0\6\21\6\0\1\231\4\0\3\231\2\0\1\231"+
    "\1\0\42\231\22\0\6\231\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\2\231\1\302\37\231\22\0\6\231"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\6\231"+
    "\2\303\32\231\22\0\6\231\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\15\231\2\304\23\231\22\0\6\231"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\5\231"+
    "\1\305\34\231\22\0\6\231\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\10\231\2\306\17\231\2\307\7\231"+
    "\22\0\6\231\6\0\1\231\4\0\3\231\2\0\1\231"+
    "\1\0\5\231\1\310\34\231\22\0\6\231\6\0\1\231"+
    "\4\0\3\231\2\0\1\231\1\0\21\231\2\311\17\231"+
    "\22\0\6\231\6\0\1\231\4\0\3\231\2\0\1\231"+
    "\1\0\2\312\40\231\22\0\6\231\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\3\157\2\313\35\157\22\0"+
    "\6\157\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\5\157\1\314\34\157\22\0\6\157\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\25\157\2\315\13\157\22\0"+
    "\6\157\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\12\157\2\316\26\157\22\0\6\157\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\5\157\1\317\34\157\22\0"+
    "\6\157\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\2\157\1\320\37\157\22\0\6\157\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\14\157\1\321\25\157\22\0"+
    "\6\157\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\10\157\2\322\30\157\22\0\6\157\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\15\157\2\323\23\157\22\0"+
    "\6\157\6\0\1\324\10\0\2\324\2\0\2\324\1\0"+
    "\2\324\1\0\1\324\1\0\1\324\1\0\2\324\1\0"+
    "\3\324\1\0\1\324\1\0\1\324\1\0\1\324\1\0"+
    "\1\324\1\0\1\324\1\0\1\324\1\0\2\324\1\0"+
    "\1\324\5\0\2\324\11\0\2\324\1\0\1\324\1\0"+
    "\1\324\1\0\1\324\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\17\21\1\325\22\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\6\21\2\326"+
    "\32\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\25\21\2\327\13\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\23\21\2\330"+
    "\15\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\10\21\2\331\30\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\33\21\2\332"+
    "\5\21\22\0\6\21\4\211\1\14\1\265\106\211\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\5\21\1\333"+
    "\34\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\27\21\2\334\11\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\15\21\2\335"+
    "\23\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\10\21\2\336\30\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\5\21\1\337"+
    "\34\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\27\21\2\340\11\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\10\21\2\341"+
    "\30\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\23\21\2\342\15\21\22\0\6\21\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\3\231\2\343"+
    "\35\231\22\0\6\231\6\0\1\231\4\0\3\231\2\0"+
    "\1\231\1\0\5\231\1\344\34\231\22\0\6\231\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\25\231\2\345"+
    "\13\231\22\0\6\231\6\0\1\231\4\0\3\231\2\0"+
    "\1\231\1\0\12\231\2\346\26\231\22\0\6\231\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\5\231\1\347"+
    "\34\231\22\0\6\231\6\0\1\231\4\0\3\231\2\0"+
    "\1\231\1\0\2\231\1\350\37\231\22\0\6\231\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\14\231\1\351"+
    "\25\231\22\0\6\231\6\0\1\231\4\0\3\231\2\0"+
    "\1\231\1\0\10\231\2\352\30\231\22\0\6\231\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\15\231\2\353"+
    "\23\231\22\0\6\231\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\5\157\1\354\34\157\22\0\6\157\6\0"+
    "\1\157\4\0\3\157\2\0\1\157\1\0\31\157\2\355"+
    "\7\157\22\0\6\157\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\10\157\2\356\30\157\22\0\6\157\6\0"+
    "\1\157\4\0\3\157\2\0\1\157\1\0\10\157\2\357"+
    "\30\157\22\0\6\157\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\31\157\2\360\7\157\22\0\6\157\6\0"+
    "\1\157\4\0\3\157\2\0\1\157\1\0\33\157\2\361"+
    "\5\157\22\0\6\157\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\2\157\1\362\37\157\22\0\6\157\6\0"+
    "\1\157\4\0\3\157\2\0\1\157\1\0\10\157\2\363"+
    "\30\157\22\0\6\157\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\3\157\2\364\35\157\22\0\6\157\6\0"+
    "\1\365\10\0\2\365\2\0\2\365\1\0\2\365\1\0"+
    "\1\365\1\0\1\365\1\0\2\365\1\0\3\365\1\0"+
    "\1\365\1\0\1\365\1\0\1\365\1\0\1\365\1\0"+
    "\1\365\1\0\1\365\1\0\2\365\1\0\1\365\5\0"+
    "\2\365\11\0\2\365\1\0\1\365\1\0\1\365\1\0"+
    "\1\365\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\5\21\1\366\34\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\15\21\2\367\23\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\25\21\2\370\13\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\27\21\2\371\11\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\42\21\22\0\2\21\2\372\2\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\42\21\22\0\2\21\2\373"+
    "\2\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\10\21\2\374\30\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\31\21\2\375\7\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\15\21\2\376\23\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\27\21\2\377\11\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\3\21\2\u0100\35\21\22\0\6\21\6\0\1\21\4\0"+
    "\3\21\2\0\1\21\1\0\27\21\2\u0101\11\21\22\0"+
    "\6\21\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\3\21\2\u0102\35\21\22\0\6\21\6\0\1\231\4\0"+
    "\3\231\2\0\1\231\1\0\5\231\1\u0103\34\231\22\0"+
    "\6\231\6\0\1\231\4\0\3\231\2\0\1\231\1\0"+
    "\31\231\2\u0104\7\231\22\0\6\231\6\0\1\231\4\0"+
    "\3\231\2\0\1\231\1\0\10\231\2\u0105\30\231\22\0"+
    "\6\231\6\0\1\231\4\0\3\231\2\0\1\231\1\0"+
    "\10\231\2\u0106\30\231\22\0\6\231\6\0\1\231\4\0"+
    "\3\231\2\0\1\231\1\0\31\231\2\u0107\7\231\22\0"+
    "\6\231\6\0\1\231\4\0\3\231\2\0\1\231\1\0"+
    "\33\231\2\u0108\5\231\22\0\6\231\6\0\1\231\4\0"+
    "\3\231\2\0\1\231\1\0\2\231\1\u0109\37\231\22\0"+
    "\6\231\6\0\1\231\4\0\3\231\2\0\1\231\1\0"+
    "\10\231\2\u010a\30\231\22\0\6\231\6\0\1\231\4\0"+
    "\3\231\2\0\1\231\1\0\3\231\2\u010b\35\231\22\0"+
    "\6\231\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\6\157\2\u010c\32\157\22\0\6\157\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\5\157\1\u010d\34\157\22\0"+
    "\6\157\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\14\157\1\u010e\25\157\22\0\6\157\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\5\157\1\u010f\34\157\22\0"+
    "\6\157\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\21\157\2\u0110\17\157\22\0\6\157\6\0\1\157\4\0"+
    "\3\157\2\0\1\157\1\0\23\157\2\u0111\15\157\22\0"+
    "\6\157\6\0\1\157\4\0\3\157\2\0\1\157\1\0"+
    "\3\157\2\u0112\35\157\22\0\6\157\6\0\1\u0113\10\0"+
    "\2\u0113\2\0\2\u0113\1\0\2\u0113\1\0\1\u0113\1\0"+
    "\1\u0113\1\0\2\u0113\1\0\3\u0113\1\0\1\u0113\1\0"+
    "\1\u0113\1\0\1\u0113\1\0\1\u0113\1\0\1\u0113\1\0"+
    "\1\u0113\1\0\2\u0113\1\0\1\u0113\5\0\2\u0113\11\0"+
    "\2\u0113\1\0\1\u0113\1\0\1\u0113\1\0\1\u0113\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\27\21\2\u0114"+
    "\11\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\37\21\1\u0115\2\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\3\21\2\u0116"+
    "\35\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\10\21\2\u0117\30\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\15\21\2\u0118"+
    "\23\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\27\21\2\u0119\11\21\22\0\6\21\6\0"+
    "\1\21\4\0\3\21\2\0\1\21\1\0\2\21\1\u011a"+
    "\37\21\22\0\6\21\6\0\1\21\4\0\3\21\2\0"+
    "\1\21\1\0\5\21\1\u011b\34\21\22\0\6\21\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\6\231\2\u011c"+
    "\32\231\22\0\6\231\6\0\1\231\4\0\3\231\2\0"+
    "\1\231\1\0\5\231\1\u011d\34\231\22\0\6\231\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\14\231\1\u011e"+
    "\25\231\22\0\6\231\6\0\1\231\4\0\3\231\2\0"+
    "\1\231\1\0\5\231\1\u011f\34\231\22\0\6\231\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\21\231\2\u0120"+
    "\17\231\22\0\6\231\6\0\1\231\4\0\3\231\2\0"+
    "\1\231\1\0\23\231\2\u0121\15\231\22\0\6\231\6\0"+
    "\1\231\4\0\3\231\2\0\1\231\1\0\3\231\2\u0122"+
    "\35\231\22\0\6\231\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\3\157\2\u0123\35\157\22\0\6\157\6\0"+
    "\1\157\4\0\3\157\2\0\1\157\1\0\15\157\2\u0124"+
    "\23\157\22\0\6\157\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\6\157\2\u0125\32\157\22\0\6\157\6\0"+
    "\1\157\4\0\3\157\2\0\1\157\1\0\3\157\2\u0126"+
    "\35\157\22\0\6\157\6\0\1\157\4\0\3\157\2\0"+
    "\1\157\1\0\5\157\1\u0127\34\157\22\0\6\157\6\0"+
    "\1\u0128\10\0\2\u0128\2\0\2\u0128\1\0\2\u0128\1\0"+
    "\1\u0128\1\0\1\u0128\1\0\2\u0128\1\0\3\u0128\1\0"+
    "\1\u0128\1\0\1\u0128\1\0\1\u0128\1\0\1\u0128\1\0"+
    "\1\u0128\1\0\1\u0128\1\0\2\u0128\1\0\1\u0128\5\0"+
    "\2\u0128\11\0\2\u0128\1\0\1\u0128\1\0\1\u0128\1\0"+
    "\1\u0128\6\0\1\21\4\0\3\21\2\0\1\21\1\0"+
    "\42\21\22\0\4\21\2\u0129\6\0\1\21\4\0\3\21"+
    "\2\0\1\21\1\0\2\21\1\u012a\37\21\22\0\6\21"+
    "\6\0\1\21\4\0\3\21\2\0\1\21\1\0\27\21"+
    "\2\u012b\11\21\22\0\6\21\6\0\1\21\4\0\3\21"+
    "\2\0\1\21\1\0\25\21\2\u012c\13\21\22\0\6\21"+
    "\6\0\1\21\4\0\3\21\2\0\1\21\1\0\3\21"+
    "\2\u012d\35\21\22\0\6\21\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\3\231\2\u012e\35\231\22\0\6\231"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\15\231"+
    "\2\u012f\23\231\22\0\6\231\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\6\231\2\u0130\32\231\22\0\6\231"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\3\231"+
    "\2\u0131\35\231\22\0\6\231\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\5\231\1\u0132\34\231\22\0\6\231"+
    "\6\0\1\157\4\0\3\157\2\0\1\157\1\0\10\157"+
    "\2\u0133\30\157\22\0\6\157\6\0\1\157\4\0\3\157"+
    "\2\0\1\157\1\0\5\157\1\u0134\34\157\22\0\6\157"+
    "\6\0\1\157\4\0\3\157\2\0\1\157\1\0\10\157"+
    "\2\u0135\30\157\22\0\6\157\6\0\1\157\4\0\3\157"+
    "\2\0\1\157\1\0\27\157\2\u0136\11\157\22\0\6\157"+
    "\6\0\1\21\4\0\3\21\2\0\1\21\1\0\31\21"+
    "\2\u0137\7\21\22\0\6\21\6\0\1\21\4\0\3\21"+
    "\2\0\1\21\1\0\10\21\2\u0138\30\21\22\0\6\21"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\10\231"+
    "\2\u0139\30\231\22\0\6\231\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\5\231\1\u013a\34\231\22\0\6\231"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\10\231"+
    "\2\u013b\30\231\22\0\6\231\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\27\231\2\u013c\11\231\22\0\6\231"+
    "\6\0\1\157\4\0\3\157\2\0\1\157\1\0\25\157"+
    "\2\u013d\13\157\22\0\6\157\6\0\1\157\4\0\3\157"+
    "\2\0\1\157\1\0\6\157\2\u013e\32\157\22\0\6\157"+
    "\6\0\1\21\4\0\3\21\2\0\1\21\1\0\5\21"+
    "\1\u013f\34\21\22\0\6\21\6\0\1\231\4\0\3\231"+
    "\2\0\1\231\1\0\25\231\2\u0140\13\231\22\0\6\231"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\6\231"+
    "\2\u0141\32\231\22\0\6\231\6\0\1\157\4\0\3\157"+
    "\2\0\1\157\1\0\17\157\1\u0142\22\157\22\0\6\157"+
    "\6\0\1\231\4\0\3\231\2\0\1\231\1\0\17\231"+
    "\1\u0143\22\231\22\0\6\231";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17556];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\1\1\1\11\15\1\11\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\12\1\4\11\2\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\2\1\3\0\1\11\12\1"+
    "\12\11\1\0\11\1\1\0\12\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\11\2\0\1\1\1\11\36\1\1\0"+
    "\11\1\1\0\36\1\1\0\40\1\1\0\35\1\1\0"+
    "\24\1\1\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private String path;

    StringBuilder stringBuilder = new StringBuilder();
    char tmpChar = 0;

    /**
    * variable que sirve para regresar de STRING_STATE al estado que lo inicio
    */
    int prevState_String = YYINITIAL;

    /**
    * variable que sirve para regresar de EMBEDDED_UFE_STATE al estado que lo inicio
    */
    int prevState_EmbeddedUfe = YYINITIAL; 

    //Helper functions to return multiple java_cup.runtime.Symbol to the parser
    private Symbol symbol(int type){
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }

    public String getPath(){
        return path;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) throws IllegalArgumentException {
      //CHAPUZ MAXIMO se utilizo in en vez de zzReader porque el codigo dentro de init es copiado antes de hacer this.zzReader = in
    if(!(in instanceof MyFileReader)){
        throw new IllegalArgumentException("Reader in must be an instance of MyFileReader");
    }
    MyFileReader tmp = (MyFileReader) in;
    path = tmp.getPath();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2918) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { MyError error = new MyError(MyErrorType.LEXIC, Phase.UFE, path, yyline + 1, yycolumn + 1, "Illegal character <"+ yytext()+">");
    MySystem.Console.println(error);
    //Pasar a consola
    //MyGui.MainJFrame.logln(error);
            } 
            // fall through
          case 106: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 107: break;
          case 3: 
            { return symbol(sym.DIV);
            } 
            // fall through
          case 108: break;
          case 4: 
            { return symbol(sym.MULT);
            } 
            // fall through
          case 109: break;
          case 5: 
            { return symbol(sym.INTEGER_LITERAL, Integer.valueOf(yytext()));
            } 
            // fall through
          case 110: break;
          case 6: 
            { return symbol(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 111: break;
          case 7: 
            { return symbol(sym.LESS);
            } 
            // fall through
          case 112: break;
          case 8: 
            { stringBuilder.setLength(0); prevState_String = YYINITIAL; yybegin(STRING_STATE);
            } 
            // fall through
          case 113: break;
          case 9: 
            { return symbol(sym.O_PAREN);
            } 
            // fall through
          case 114: break;
          case 10: 
            { return symbol(sym.C_PAREN);
            } 
            // fall through
          case 115: break;
          case 11: 
            { return symbol(sym.O_CURLY);
            } 
            // fall through
          case 116: break;
          case 12: 
            { return symbol(sym.C_CURLY);
            } 
            // fall through
          case 117: break;
          case 13: 
            { return symbol(sym.O_BOX);
            } 
            // fall through
          case 118: break;
          case 14: 
            { return symbol(sym.C_BOX);
            } 
            // fall through
          case 119: break;
          case 15: 
            { return symbol(sym.COMMA);
            } 
            // fall through
          case 120: break;
          case 16: 
            { return symbol(sym.SEMICOLON);
            } 
            // fall through
          case 121: break;
          case 17: 
            { return symbol(sym.EQ);
            } 
            // fall through
          case 122: break;
          case 18: 
            { return symbol(sym.PLUS);
            } 
            // fall through
          case 123: break;
          case 19: 
            { return symbol(sym.MINUS);
            } 
            // fall through
          case 124: break;
          case 20: 
            { return symbol(sym.GREATER);
            } 
            // fall through
          case 125: break;
          case 21: 
            { return symbol(sym.NOT);
            } 
            // fall through
          case 126: break;
          case 22: 
            { return symbol(sym.XOR);
            } 
            // fall through
          case 127: break;
          case 23: 
            { stringBuilder.append( yytext() );
            } 
            // fall through
          case 128: break;
          case 24: 
            { yybegin(prevState_String);
    return symbol(sym.STRING_LITERAL,
    stringBuilder.toString());
            } 
            // fall through
          case 129: break;
          case 25: 
            { yybegin(UFEX_TAG); return symbol(sym.O_PAREN);
            } 
            // fall through
          case 130: break;
          case 26: 
            { yybegin(YYINITIAL); return symbol(sym.C_PAREN);
            } 
            // fall through
          case 131: break;
          case 27: 
            { return symbol(sym.X);
            } 
            // fall through
          case 132: break;
          case 28: 
            { stringBuilder.setLength(0); 
        prevState_String = UFEX_PROPERTIES; 
        yybegin(STRING_STATE);
            } 
            // fall through
          case 133: break;
          case 29: 
            { yypushback(1); 
        prevState_EmbeddedUfe = UFEX_PROPERTIES; 
        yybegin(PRE_EMBEDDED_UFE_STATE);
            } 
            // fall through
          case 134: break;
          case 30: 
            { tmpChar = 0; stringBuilder.setLength(0); yybegin(UFEX_PLAINTEXT_0); return symbol(sym.GREATER);
            } 
            // fall through
          case 135: break;
          case 31: 
            { return symbol(sym.Y);
            } 
            // fall through
          case 136: break;
          case 32: 
            { if(tmpChar != 0){
            stringBuilder.append(tmpChar);
        }
        stringBuilder.append(yytext());
        yybegin(UFEX_PLAINTEXT_1);
            } 
            // fall through
          case 137: break;
          case 33: 
            { yypushback(1);
        yybegin(YYINITIAL);
        String s = stringBuilder.toString().trim();
        if(s.length() > 0){
            return symbol(sym.PLAIN_TEXT, stringBuilder.toString());
        }
            } 
            // fall through
          case 138: break;
          case 34: 
            { prevState_EmbeddedUfe = UFEX_PLAINTEXT_1;
        yypushback(1);
        yybegin(PRE_EMBEDDED_UFE_STATE);
        if(tmpChar != 0){
            stringBuilder.append(tmpChar);
        }
        tmpChar = 0;
        String s = stringBuilder.toString().trim();
        if(s.length() > 0){
            return symbol(sym.PLAIN_TEXT, stringBuilder.toString());
        }
            } 
            // fall through
          case 139: break;
          case 35: 
            { stringBuilder.append(yytext());
            } 
            // fall through
          case 140: break;
          case 36: 
            { tmpChar = ' '; 
        yybegin(UFEX_PLAINTEXT_0);
            } 
            // fall through
          case 141: break;
          case 37: 
            { yypushback(1);
        prevState_EmbeddedUfe = UFEX_PLAINTEXT_1;
        yybegin(PRE_EMBEDDED_UFE_STATE);
        String s = stringBuilder.toString().trim();
        if(s.length() > 0){
            return symbol(sym.PLAIN_TEXT, stringBuilder.toString());
        }
            } 
            // fall through
          case 142: break;
          case 38: 
            { yybegin(EMBEDDED_UFE_STATE);
        return symbol(sym.O_CURLY);
            } 
            // fall through
          case 143: break;
          case 39: 
            { /* igonore */
            } 
            // fall through
          case 144: break;
          case 40: 
            { stringBuilder.setLength(0); prevState_String = EMBEDDED_UFE_STATE; yybegin(STRING_STATE);
            } 
            // fall through
          case 145: break;
          case 41: 
            { if(prevState_EmbeddedUfe != UFEX_PROPERTIES){//UFEX_PROPERTIES es el unico caso en el que no regresa a algun estado de PLAIN_TEXT
            stringBuilder.setLength(0);
        }
        yybegin(prevState_EmbeddedUfe);
        return symbol(sym.C_CURLY);
            } 
            // fall through
          case 146: break;
          case 42: 
            { return symbol(sym.LESS_EQ);
            } 
            // fall through
          case 147: break;
          case 43: 
            { return symbol(sym.SI);
            } 
            // fall through
          case 148: break;
          case 44: 
            { return symbol(sym.EQ_EQ);
            } 
            // fall through
          case 149: break;
          case 45: 
            { return symbol(sym.GREATER_EQ);
            } 
            // fall through
          case 150: break;
          case 46: 
            { return symbol(sym.NOT_EQ);
            } 
            // fall through
          case 151: break;
          case 47: 
            { return symbol(sym.AND);
            } 
            // fall through
          case 152: break;
          case 48: 
            { return symbol(sym.OR);
            } 
            // fall through
          case 153: break;
          case 49: 
            { stringBuilder.append('\n');
            } 
            // fall through
          case 154: break;
          case 50: 
            { stringBuilder.append('\t');
            } 
            // fall through
          case 155: break;
          case 51: 
            { stringBuilder.append('\r');
            } 
            // fall through
          case 156: break;
          case 52: 
            { stringBuilder.append('\"');
            } 
            // fall through
          case 157: break;
          case 53: 
            { stringBuilder.append('\\');
            } 
            // fall through
          case 158: break;
          case 54: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.CUSTOM_O, yytext().substring(1));
            } 
            // fall through
          case 159: break;
          case 55: 
            { return symbol(sym.ID);
            } 
            // fall through
          case 160: break;
          case 56: 
            { yypushback(yylength());
        yybegin(UFEX_TAG);
        String s = stringBuilder.toString().trim();
        if(s.length() > 0){
            return symbol(sym.PLAIN_TEXT, stringBuilder.toString().replaceAll("[\r|\n| |\t|\f]+", " "));//Chapuz alto para quitar los espacios extra
        }
            } 
            // fall through
          case 161: break;
          case 57: 
            { if(tmpChar != 0){
            stringBuilder.append(tmpChar); 
        }
        stringBuilder.append(")"); 
        yybegin(UFEX_PLAINTEXT_1);
            } 
            // fall through
          case 162: break;
          case 58: 
            { yypushback(yylength());
        yybegin(UFEX_TAG);
        String s = stringBuilder.toString().trim();
        if(s.length() > 0){
            return symbol(sym.PLAIN_TEXT, stringBuilder.toString());
        }
            } 
            // fall through
          case 163: break;
          case 59: 
            { if(tmpChar != 0){
            stringBuilder.append(tmpChar);
        }
        stringBuilder.append(")");
            } 
            // fall through
          case 164: break;
          case 60: 
            { return symbol(sym.DOUBLE_LITERAL, Double.valueOf(yytext()));
            } 
            // fall through
          case 165: break;
          case 61: 
            { return symbol(sym.CHARACTER_LITERAL, Character.valueOf(yytext().charAt(1)));
            } 
            // fall through
          case 166: break;
          case 62: 
            { return symbol(sym.POW);
            } 
            // fall through
          case 167: break;
          case 63: 
            { return symbol(sym.VAR);
            } 
            // fall through
          case 168: break;
          case 64: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.CUSTOM_C, yytext().substring(2));
            } 
            // fall through
          case 169: break;
          case 65: 
            { return symbol(sym.SRC);
            } 
            // fall through
          case 170: break;
          case 66: 
            { return symbol(sym.MAX);
            } 
            // fall through
          case 171: break;
          case 67: 
            { return symbol(sym.MIN);
            } 
            // fall through
          case 172: break;
          case 68: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
            } 
            // fall through
          case 173: break;
          case 69: 
            { return symbol(sym.FROM);
            } 
            // fall through
          case 174: break;
          case 70: 
            { return symbol(sym.SINO);
            } 
            // fall through
          case 175: break;
          case 71: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(false));
            } 
            // fall through
          case 176: break;
          case 72: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.LIST_O);
            } 
            // fall through
          case 177: break;
          case 73: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.TEXT_O);
            } 
            // fall through
          case 178: break;
          case 74: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.ITEM_O);
            } 
            // fall through
          case 179: break;
          case 75: 
            { return symbol(sym.COLOR);
            } 
            // fall through
          case 180: break;
          case 76: 
            { return symbol(sym.WIDTH);
            } 
            // fall through
          case 181: break;
          case 77: 
            { return symbol(sym.IMPORT);
            } 
            // fall through
          case 182: break;
          case 78: 
            { return symbol(sym.RENDER);
            } 
            // fall through
          case 183: break;
          case 79: 
            { yybegin(UFEX_INITIAL); return symbol(sym.RETURN);
            } 
            // fall through
          case 184: break;
          case 80: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.LIST_C);
            } 
            // fall through
          case 185: break;
          case 81: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.TEXT_C);
            } 
            // fall through
          case 186: break;
          case 82: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.ITEM_C);
            } 
            // fall through
          case 187: break;
          case 83: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.PANEL_O);
            } 
            // fall through
          case 188: break;
          case 84: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.IMAGE_O);
            } 
            // fall through
          case 189: break;
          case 85: 
            { return symbol(sym.BORDER);
            } 
            // fall through
          case 190: break;
          case 86: 
            { return symbol(sym.HEIGHT);
            } 
            // fall through
          case 191: break;
          case 87: 
            { return symbol(sym.REPETIR);
            } 
            // fall through
          case 192: break;
          case 88: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.PANEL_C);
            } 
            // fall through
          case 193: break;
          case 89: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.IMAGE_C);
            } 
            // fall through
          case 194: break;
          case 90: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.BUTTON_O);
            } 
            // fall through
          case 195: break;
          case 91: 
            { return symbol(sym.COLOR_LITERAL, Integer.parseInt(yytext().substring(1).toLowerCase(), 16));
            } 
            // fall through
          case 196: break;
          case 92: 
            { return symbol(sym.ONCLICK);
            } 
            // fall through
          case 197: break;
          case 93: 
            { return symbol(sym.IMPRIMIR);
            } 
            // fall through
          case 198: break;
          case 94: 
            { return symbol(sym.MIENTRAS);
            } 
            // fall through
          case 199: break;
          case 95: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.BUTTON_C);
            } 
            // fall through
          case 200: break;
          case 96: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.DEFAULT_O);
            } 
            // fall through
          case 201: break;
          case 97: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.SPINNER_O);
            } 
            // fall through
          case 202: break;
          case 98: 
            { return symbol(sym.COMPONENT);
            } 
            // fall through
          case 203: break;
          case 99: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.DEFAULT_C);
            } 
            // fall through
          case 204: break;
          case 100: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.SPINNER_C);
            } 
            // fall through
          case 205: break;
          case 101: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.ELEMENTS_O);
            } 
            // fall through
          case 206: break;
          case 102: 
            { return symbol(sym.CLASSNAME);
            } 
            // fall through
          case 207: break;
          case 103: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.ELEMENTS_C);
            } 
            // fall through
          case 208: break;
          case 104: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.TEXTFIELD_O);
            } 
            // fall through
          case 209: break;
          case 105: 
            { yybegin(UFEX_PROPERTIES); return symbol(sym.TEXTFIELD_C);
            } 
            // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
