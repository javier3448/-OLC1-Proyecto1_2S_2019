
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

package ParserHTML;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.LinkedList;
import MyObjects.MyError.MyErrorType;
import MyObjects.MyError.Phase;
import MyObjects.MyError;
import java.util.Locale;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\007\000\002\004\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\004\000" +
    "\002\006\006\000\002\006\005\000\002\007\003\000\002" +
    "\007\002\000\002\010\003\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\004\005\001\002\000\004\002\040\001" +
    "\002\000\006\005\011\007\010\001\002\000\010\005\ufffc" +
    "\007\ufffc\012\ufffc\001\002\000\010\005\011\007\010\012" +
    "\036\001\002\000\006\010\022\011\024\001\002\000\004" +
    "\006\013\001\002\000\010\005\uffff\007\uffff\012\uffff\001" +
    "\002\000\006\014\ufff5\020\016\001\002\000\004\014\020" +
    "\001\002\000\006\014\ufff6\016\ufff6\001\002\000\010\014" +
    "\ufff4\016\ufff4\020\016\001\002\000\006\014\ufff3\016\ufff3" +
    "\001\002\000\004\013\021\001\002\000\010\005\ufffd\007" +
    "\ufffd\012\ufffd\001\002\000\006\016\ufff5\020\016\001\002" +
    "\000\010\010\026\011\030\015\027\001\002\000\004\017" +
    "\025\001\002\000\010\010\ufff9\011\ufff9\015\ufff9\001\002" +
    "\000\006\016\ufff5\020\016\001\002\000\010\005\ufffb\007" +
    "\ufffb\012\ufffb\001\002\000\004\017\031\001\002\000\010" +
    "\010\ufff7\011\ufff7\015\ufff7\001\002\000\004\016\033\001" +
    "\002\000\010\010\ufff8\011\ufff8\015\ufff8\001\002\000\004" +
    "\016\035\001\002\000\010\010\ufffa\011\ufffa\015\ufffa\001" +
    "\002\000\004\002\001\001\002\000\010\005\ufffe\007\ufffe" +
    "\012\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\006\004\011\005\005\001\001\000\002\001\001" +
    "\000\006\004\036\005\005\001\001\000\004\006\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\013" +
    "\010\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\033\010\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\031\010\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    if(!(getScanner() instanceof Lexer)){
        System.out.println("El escaner del HTML parser no tiene un path a un archivo");
    }
    else{
        Lexer tmp = (Lexer) getScanner();
        path = tmp.getPath();
    }

    }


    public HtmlObjLang htmlObjLang;

    private LinkedList<String> idDivs = new LinkedList<>();
    private String noufe;
    private String title;

    private String path = "null"; //Chapuz minimo para evitar conflictos con null

    public void syntax_error(Symbol s)
    {        
        int linea = s.left;
        int columna = s.right;

        MyError error = new MyError(MyErrorType.SYNTAX, Phase.HTML, path, linea, columna, "Error cerca de: " + sym.terminalNames[s.sym]);
        report_error(error.msg, error);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        int linea = s.left;
        int columna = s.right;
        MyError error = new MyError(MyErrorType.SYNTAX, Phase.HTML,  path, linea, columna, "Error fatal cerca de: " + sym.terminalNames[s.sym]);
        report_fatal_error(error.msg, error);
    }
    public void report_error(String message, Object info){
        MySystem.Console.println((MyError)info);
        //Pasar a consola
        //MyGui.MainJFrame.logln((MyError) info);
    }
    public void report_fatal_error(String message, Object info){
        MySystem.Console.println((MyError)info);
        //Pasar a consola
        //MyGui.MainJFrame.logln((MyError) info);
        htmlObjLang = null;
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nombre de la clase padre
    LinkedList<String> divIds = new LinkedList<String>();;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= HTML_O l_html_cnt HTML_C 
            {
              HtmlObjLang RESULT =null;
		 
          RESULT = new HtmlObjLang(noufe, title, idDivs);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HtmlObjLang start_val = (HtmlObjLang)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // l_html_cnt ::= html_cnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_html_cnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // l_html_cnt ::= l_html_cnt html_cnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_html_cnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // html_cnt ::= HEAD_O TITLE_O l_plaintext TITLE_C HEAD_C 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                     if(p == null){
                     }
                     else {
                         title = p;
                     }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_cnt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // html_cnt ::= body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_cnt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= BODY_O l_body_cnt BODY_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // l_body_cnt ::= NOUFE_O l_plaintext NOUFE_C 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       if(p == null){
                       }
                       else {
                           noufe = p;
                       }
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_body_cnt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_body_cnt ::= DIV_O DIV_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       id = id.toLowerCase(Locale.ROOT);
                       if(idDivs.remove(id)){
                           String msg = "id div: [" + id + "] definido 1 o mas veces";
                           MyError error = new MyError(MyError.MyErrorType.SEMANTIC, MyError.Phase.HTML, path, idleft, idright, msg);
                           MySystem.Console.println(error);
                       }
                       
                       idDivs.add(id);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_body_cnt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_body_cnt ::= l_body_cnt NOUFE_O l_plaintext NOUFE_C 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       if(p == null){
                       }
                       else {
                           noufe = p;
                       }
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_body_cnt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_body_cnt ::= l_body_cnt DIV_O DIV_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       id = id.toLowerCase(Locale.ROOT);
                       if(idDivs.remove(id)){
                           String msg = "id div: " + id + "definido 1 o mas veces";
                           MyError error = new MyError(MyError.MyErrorType.SEMANTIC, MyError.Phase.HTML, path, idleft, idright, msg);
                           MySystem.Console.println(error);
                       }
                       
                       idDivs.add(id);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_body_cnt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_plaintext ::= l_plaintext$ 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_plaintext",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_plaintext ::= 
            {
              String RESULT =null;
		
                    RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_plaintext",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_plaintext$ ::= PLAIN_TEXT 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_plaintext$",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // l_plaintext$ ::= PLAIN_TEXT l_plaintext$ 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = p + s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_plaintext$",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
