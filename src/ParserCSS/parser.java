
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

package ParserCSS;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.LinkedList;
import java.awt.Color;
import MyObjects.MyError.MyErrorType;
import MyObjects.MyError.Phase;
import MyObjects.MyError;
import ParserCSS.CssNode.NodeTag;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\004\004\000\002\004\003\000\002\005\007" +
    "\000\002\010\003\000\002\010\002\000\002\007\004\000" +
    "\002\007\003\000\002\006\007\000\002\011\003\000\002" +
    "\011\004\000\002\012\003\000\002\012\004\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\013\003\000\002\013\003\000\002\013\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\002\uffff\035\007\001\002\000\006\002" +
    "\ufffd\035\ufffd\001\002\000\006\002\001\035\007\001\002" +
    "\000\004\002\112\001\002\000\004\022\010\001\002\000" +
    "\026\004\017\005\022\006\014\007\011\010\013\011\024" +
    "\012\015\013\012\014\021\015\020\001\002\000\004\027" +
    "\107\001\002\000\004\027\104\001\002\000\004\027\101" +
    "\001\002\000\004\027\076\001\002\000\004\027\073\001" +
    "\002\000\030\004\017\005\022\006\014\007\011\010\013" +
    "\011\024\012\015\013\012\014\021\015\020\023\057\001" +
    "\002\000\004\027\053\001\002\000\004\027\036\001\002" +
    "\000\004\027\033\001\002\000\004\027\030\001\002\000" +
    "\030\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\023\ufff6\001\002\000" +
    "\004\027\025\001\002\000\004\031\026\001\002\000\004" +
    "\024\027\001\002\000\030\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\023\uffef\001\002\000\004\031\031\001\002\000\004\024" +
    "\032\001\002\000\030\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\023" +
    "\uffe9\001\002\000\004\031\034\001\002\000\004\024\035" +
    "\001\002\000\030\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\023\uffec" +
    "\001\002\000\010\016\037\017\042\032\041\001\002\000" +
    "\004\020\044\001\002\000\004\024\043\001\002\000\004" +
    "\024\uffe7\001\002\000\004\024\uffe8\001\002\000\030\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\023\uffeb\001\002\000\004\031" +
    "\045\001\002\000\004\025\046\001\002\000\004\031\047" +
    "\001\002\000\004\025\050\001\002\000\004\031\051\001" +
    "\002\000\004\021\052\001\002\000\004\024\uffe6\001\002" +
    "\000\004\031\054\001\002\000\004\024\055\001\002\000" +
    "\030\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\023\uffea\001\002\000" +
    "\030\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\023\ufff5\001\002\000" +
    "\010\002\ufffa\026\063\035\ufffa\001\002\000\010\002\ufff8" +
    "\026\ufff8\035\ufff8\001\002\000\006\002\ufffc\035\ufffc\001" +
    "\002\000\010\002\ufffb\026\063\035\ufffb\001\002\000\004" +
    "\035\064\001\002\000\004\022\065\001\002\000\026\004" +
    "\017\005\022\006\014\007\011\010\013\011\024\012\015" +
    "\013\012\014\021\015\020\001\002\000\030\004\017\005" +
    "\022\006\014\007\011\010\013\011\024\012\015\013\012" +
    "\014\021\015\020\023\070\001\002\000\030\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\023\ufff4\001\002\000\010\002\ufff7\026" +
    "\ufff7\035\ufff7\001\002\000\030\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\023\ufff3\001\002\000\010\002\ufff9\026\ufff9\035\ufff9" +
    "\001\002\000\004\034\074\001\002\000\004\024\075\001" +
    "\002\000\030\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\023\uffee\001" +
    "\002\000\010\016\037\017\042\032\041\001\002\000\004" +
    "\024\100\001\002\000\030\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\023\ufff2\001\002\000\010\016\037\017\042\032\041\001" +
    "\002\000\004\024\103\001\002\000\030\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\023\ufff0\001\002\000\004\030\105\001\002" +
    "\000\004\024\106\001\002\000\030\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\023\uffed\001\002\000\004\033\110\001\002\000" +
    "\004\024\111\001\002\000\030\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\023\ufff1\001\002\000\004\002\000\001\002\000\006" +
    "\002\ufffe\035\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\010\002\005\004\004\005\003\001\001\000" +
    "\002\001\001\000\004\005\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\022\011\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\057\007\061\010\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\066\012\065\001\001" +
    "\000\004\003\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    if(!(getScanner() instanceof Lexer)){
        System.out.println("El escaner del CSS parser no tiene un path a un archivo");
    }
    else{
        Lexer tmp = (Lexer) getScanner();
        path = tmp.getPath();
    }

    }


    public CssNode root;
    
    private String path = "null"; //Chapuz minimo para evitar conflictos con null

    public void syntax_error(Symbol s)
    {        
        int linea = s.left;
        int columna = s.right;

        MyError error = new MyError(MyErrorType.SYNTAX, Phase.CSS, path, linea, columna, "Error cerca de: " + sym.terminalNames[s.sym]);
        report_error(error.msg, error);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        int linea = s.left;
        int columna = s.right;
        MyError error = new MyError(MyErrorType.SYNTAX, Phase.CSS,  path, linea, columna, "Error fatal cerca de: " + sym.terminalNames[s.sym]);
        report_fatal_error(error.msg + " linea: " + linea, error);
    }
    public void report_error(String message, Object info){
        MySystem.Console.println((MyError)info);
        //Pasar a consola
        //MyGui.MainJFrame.logln((MyError) info);
    }
    public void report_fatal_error(String message, Object info){
        MySystem.Console.println((MyError)info);
        root = null;
        //Pasar a consola
        //MyGui.MainJFrame.logln((MyError) info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    private HashMap<Integer, Object> properties = new HashMap<Integer, Object>();
    private HashMap<Integer, Object> subproperties = new HashMap<Integer, Object>();

    private class MyProperty{
        public Integer key;
        public Object value;

        public MyProperty(Integer key, Object value){
            this.key = key;
            this.value = value;
        }
    }

    private class SubclassKey{
        public String id;
        public int line;
        public int column;
        
        public SubclassKey(String id, int line, int column){
            this.id = id;
            this.line = line;
            this.column = column;
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= l_classes 
            {
              CssNode RESULT =null;
		int l_clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CssNode l_cl = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             //System.out.println("Si");
             root = l_cl;
             RESULT = l_cl;
             RESULT.setValue(path);
             //aqui 1234
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CssNode start_val = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= 
            {
              CssNode RESULT =null;
		
            root = null;
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // l_classes ::= l_classes _class 
            {
              CssNode RESULT =null;
		int l_clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l_clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CssNode l_cl = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CssNode cl = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT = new CssNode(NodeTag.L_CLASS, l_clleft, l_clright, null);
                      RESULT.addChild(l_cl);
                      RESULT.addChild(cl);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_classes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // l_classes ::= _class 
            {
              CssNode RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CssNode cl = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT = new CssNode(NodeTag.L_CLASS, clleft, clright, null);
                      RESULT.addChild(cl);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_classes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // _class ::= IDENTIFIER O_CURLY l_properties C_CURLY l_subclasses 
            {
              CssNode RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l_subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CssNode l_sub = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   SimpleEntry<String, HashMap<Integer, Object>> pair = new SimpleEntry<String, HashMap<Integer, Object>>(id1, properties);
                   RESULT = new CssNode(NodeTag.CLASS, id1left, id1right, pair);
                   if(l_sub != null){
                       RESULT.addChild(l_sub);
                   }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_class",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // l_subclasses ::= l_subclasses_ 
            {
              CssNode RESULT =null;
		int l_subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CssNode l_sub = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = l_sub;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_subclasses",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // l_subclasses ::= 
            {
              CssNode RESULT =null;
		
                         RESULT = null;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_subclasses",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_subclasses_ ::= l_subclasses_ subclass 
            {
              CssNode RESULT =null;
		int l_subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l_subright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CssNode l_sub = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CssNode sub = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          RESULT = new CssNode(NodeTag.L_SUBCLASS, l_subleft, l_subright, null);
                          RESULT.addChild(l_sub);
                          RESULT.addChild(sub);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_subclasses_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_subclasses_ ::= subclass 
            {
              CssNode RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CssNode sub = (CssNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          RESULT = new CssNode(NodeTag.L_SUBCLASS, subleft, subright, null);
                          RESULT.addChild(sub);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_subclasses_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // subclass ::= DOT IDENTIFIER O_CURLY l_subproperties C_CURLY 
            {
              CssNode RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                     SimpleEntry<String, HashMap<Integer, Object>> pair = new SimpleEntry<String, HashMap<Integer, Object>>(id1, subproperties);
                     RESULT = new CssNode(NodeTag.SUBCLASS, id1left, id1right, pair);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subclass",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_properties ::= property 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyProperty p1 = (MyProperty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         properties = new HashMap<Integer, Object>();
                         properties.put(p1.key, p1.value);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_properties",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_properties ::= l_properties property 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyProperty p1 = (MyProperty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         properties.put(p1.key, p1.value);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_properties",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_subproperties ::= property 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyProperty p1 = (MyProperty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            subproperties = new HashMap<Integer, Object>();
                            subproperties.put(p1.key, p1.value);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_subproperties",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // l_subproperties ::= l_subproperties property 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyProperty p1 = (MyProperty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            subproperties.put(p1.key, p1.value);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_subproperties",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // property ::= BACKGROUND COLON color_value SEMICOLON 
            {
              MyProperty RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c1 = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.BACKGROUND, c1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // property ::= BORDER COLON BOOL_LITERAL SEMICOLON 
            {
              MyProperty RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.BORDER, b1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // property ::= BORDER_COLOR COLON color_value SEMICOLON 
            {
              MyProperty RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c1 = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.BORDER_COLOR, c1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // property ::= BORDER_WIDTH COLON NUMBER_LITERAL SEMICOLON 
            {
              MyProperty RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.BORDER_WIDTH, n1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // property ::= ALIGN COLON ALIGN_LITERAL SEMICOLON 
            {
              MyProperty RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.ALIGN, n1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // property ::= FONT COLON STRING_LITERAL SEMICOLON 
            {
              MyProperty RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.FONT, s1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // property ::= FONT_SIZE COLON NUMBER_LITERAL SEMICOLON 
            {
              MyProperty RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.FONT_SIZE, n1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // property ::= FONT_COLOR COLON color_value SEMICOLON 
            {
              MyProperty RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c1 = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.FONT_COLOR, c1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // property ::= HEIGHT COLON NUMBER_LITERAL SEMICOLON 
            {
              MyProperty RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.HEIGHT, n1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // property ::= WIDTH COLON NUMBER_LITERAL SEMICOLON 
            {
              MyProperty RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new MyProperty(sym.WIDTH, n1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("property",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // color_value ::= COLOR_NAME 
            {
              Color RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new Color(c1.intValue());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_value",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // color_value ::= HEX_COLOR 
            {
              Color RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new Color(c1.intValue());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_value",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // color_value ::= RGB O_PAREN NUMBER_LITERAL COMMA NUMBER_LITERAL COMMA NUMBER_LITERAL C_PAREN 
            {
              Color RESULT =null;
		int cRedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cRedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer cRed = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cGreenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cGreenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer cGreen = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cBlueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cBlueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer cBlue = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new Color(cRed.intValue(), cGreen.intValue(), cBlue.intValue());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_value",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
