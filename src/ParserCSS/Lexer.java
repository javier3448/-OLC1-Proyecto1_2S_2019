/* The following code was generated by JFlex 1.7.0 */

/****************************************************************************/
/*------------------------------C-S-S scanner-------------------------------*/
/****************************************************************************/

package ParserCSS;
import java_cup.runtime.*;
import MyObjects.MyError.MyErrorType;
import MyObjects.MyError.Phase;
import MyObjects.MyError;
import MyObjects.MyFileReader;
import java.awt.Color;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/ParserCSS/scannerSpecification.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\3\1\2\1\17\1\20\1\1\16\14\4\0\1\3\2\0"+
    "\1\10\1\12\2\0\1\15\1\70\1\71\1\5\1\0\1\73\1\6"+
    "\1\76\1\4\12\7\1\77\1\72\5\0\1\37\1\36\1\40\1\35"+
    "\1\24\1\55\1\30\1\23\1\26\1\13\1\42\1\54\1\67\1\52"+
    "\1\46\1\63\1\13\1\44\1\57\1\32\1\50\1\13\1\34\1\13"+
    "\1\65\1\61\1\11\1\16\2\11\1\13\1\11\1\37\1\36\1\40"+
    "\1\35\1\24\1\55\1\27\1\22\1\25\1\12\1\41\1\53\1\66"+
    "\1\51\1\45\1\62\1\12\1\43\1\56\1\31\1\47\1\12\1\33"+
    "\1\12\1\64\1\60\1\74\1\0\1\75\1\0\6\14\1\21\32\14"+
    "\2\0\4\12\4\0\1\12\2\0\1\14\7\0\1\12\4\0\1\12"+
    "\5\0\27\12\1\0\37\12\1\0\70\12\2\25\115\12\1\56\u0142\12"+
    "\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\21\0\160\14"+
    "\5\12\1\0\2\12\2\0\4\12\10\0\1\12\1\0\3\12\1\0"+
    "\1\12\1\0\24\12\1\0\123\12\1\0\213\12\1\0\5\14\2\0"+
    "\236\12\11\0\46\12\2\0\1\12\7\0\47\12\7\0\1\12\1\0"+
    "\55\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\1\14\10\0"+
    "\33\12\5\0\3\12\15\0\5\14\6\0\1\12\4\0\13\14\5\0"+
    "\53\12\37\14\4\0\2\12\1\14\143\12\1\0\1\12\10\14\1\0"+
    "\6\14\2\12\2\14\1\0\4\14\2\12\12\14\3\12\2\0\1\12"+
    "\17\0\1\14\1\12\1\14\36\12\33\14\2\0\131\12\13\14\1\12"+
    "\16\0\12\14\41\12\11\14\2\12\4\0\1\12\5\0\26\12\4\14"+
    "\1\12\11\14\1\12\3\14\1\12\5\14\22\0\31\12\3\14\104\0"+
    "\1\12\1\0\13\12\67\0\33\14\1\0\4\14\66\12\3\14\1\12"+
    "\22\14\1\12\7\14\12\12\2\14\2\0\12\14\1\0\7\12\1\0"+
    "\7\12\1\0\3\14\1\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\1\12\3\0\4\12\2\0\1\14\1\12\7\14\2\0"+
    "\2\14\2\0\3\14\1\12\10\0\1\14\4\0\2\12\1\0\3\12"+
    "\2\14\2\0\12\14\4\12\7\0\1\12\5\0\3\14\1\0\6\12"+
    "\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\2\12"+
    "\1\0\2\12\2\0\1\14\1\0\5\14\4\0\2\14\2\0\3\14"+
    "\3\0\1\14\7\0\4\12\1\0\1\12\7\0\14\14\3\12\1\14"+
    "\13\0\3\14\1\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\5\12\2\0\1\14\1\12\10\14\1\0\3\14"+
    "\1\0\3\14\2\0\1\12\17\0\2\12\2\14\2\0\12\14\1\0"+
    "\1\12\17\0\3\14\1\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\5\12\2\0\1\14\1\12\7\14\2\0"+
    "\2\14\2\0\3\14\10\0\2\14\4\0\2\12\1\0\3\12\2\14"+
    "\2\0\12\14\1\0\1\12\20\0\1\14\1\12\1\0\6\12\3\0"+
    "\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\3\0\3\12\3\0\14\12\4\0\5\14\3\0\3\14\1\0"+
    "\4\14\2\0\1\12\6\0\1\14\16\0\12\14\11\0\1\12\7\0"+
    "\3\14\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\3\0\1\12\7\14\1\0\3\14\1\0\4\14\7\0\2\14"+
    "\1\0\2\12\6\0\2\12\2\14\2\0\12\14\22\0\2\14\1\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\2\0"+
    "\1\14\1\12\7\14\1\0\3\14\1\0\4\14\7\0\2\14\7\0"+
    "\1\12\1\0\2\12\2\14\2\0\12\14\1\0\2\12\17\0\2\14"+
    "\1\0\10\12\1\0\3\12\1\0\51\12\2\0\1\12\7\14\1\0"+
    "\3\14\1\0\4\14\1\12\10\0\1\14\10\0\2\12\2\14\2\0"+
    "\12\14\12\0\6\12\2\0\2\14\1\0\22\12\3\0\30\12\1\0"+
    "\11\12\1\0\1\12\2\0\7\12\3\0\1\14\4\0\6\14\1\0"+
    "\1\14\1\0\10\14\22\0\2\14\15\0\60\12\1\14\2\12\7\14"+
    "\4\0\10\12\10\14\1\0\12\14\47\0\2\12\1\0\1\12\2\0"+
    "\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0"+
    "\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\14"+
    "\2\12\6\14\1\0\2\14\1\12\2\0\5\12\1\0\1\12\1\0"+
    "\6\14\2\0\12\14\2\0\4\12\40\0\1\12\27\0\2\14\6\0"+
    "\12\14\13\0\1\14\1\0\1\14\1\0\1\14\4\0\2\14\10\12"+
    "\1\0\44\12\4\0\24\14\1\0\2\14\5\12\13\14\1\0\44\14"+
    "\11\0\1\14\71\0\53\12\24\14\1\12\12\14\6\0\6\12\4\14"+
    "\4\12\3\14\1\12\3\14\2\12\7\14\3\12\4\14\15\12\14\14"+
    "\1\12\17\14\2\0\46\12\1\0\1\12\5\0\1\12\2\0\53\12"+
    "\1\0\u014d\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\51\12\1\0\4\12\2\0\41\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\17\12\1\0\71\12\1\0\4\12"+
    "\2\0\103\12\2\0\3\14\40\0\20\12\20\0\125\12\14\0\u026c\12"+
    "\2\0\21\12\1\0\32\12\5\0\113\12\3\0\3\12\17\0\15\12"+
    "\1\0\4\12\3\14\13\0\22\12\3\14\13\0\22\12\2\14\14\0"+
    "\15\12\1\0\3\12\1\0\2\14\14\0\64\12\40\14\3\0\1\12"+
    "\3\0\2\12\1\14\2\0\12\14\41\0\3\14\2\0\12\14\6\0"+
    "\130\12\10\0\51\12\1\14\1\12\5\0\106\12\12\0\35\12\3\0"+
    "\14\14\4\0\14\14\12\0\12\14\36\12\2\0\5\12\13\0\54\12"+
    "\4\0\21\14\7\12\2\14\6\0\12\14\46\0\27\12\5\14\4\0"+
    "\65\12\12\14\1\0\35\14\2\0\13\14\6\0\12\14\15\0\1\12"+
    "\130\0\5\14\57\12\21\14\7\12\4\0\12\14\21\0\11\14\14\0"+
    "\3\14\36\12\15\14\2\12\12\14\54\12\16\14\14\0\44\12\24\14"+
    "\10\0\12\14\3\0\3\12\12\14\44\12\122\0\3\14\1\0\25\14"+
    "\4\12\1\14\4\12\3\14\2\12\11\0\300\12\47\14\25\0\4\14"+
    "\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\16\0\5\14\30\0"+
    "\1\17\1\17\5\14\20\0\2\12\23\0\1\12\13\0\5\14\5\0"+
    "\6\14\1\0\1\12\15\0\1\12\20\0\15\12\3\0\33\12\25\0"+
    "\15\14\4\0\1\14\3\0\14\14\21\0\1\12\4\0\1\12\2\0"+
    "\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\41\3\12\1\0\13\12\2\0\4\12\5\0\5\12"+
    "\4\0\1\12\21\0\51\12\u0a77\0\57\12\1\0\57\12\1\0\205\12"+
    "\6\0\4\12\3\14\2\12\14\0\46\12\1\0\1\12\5\0\1\12"+
    "\2\0\70\12\7\0\1\12\17\0\1\14\27\12\11\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\40\14\57\0\1\12\u01d5\0\3\12\31\0"+
    "\11\12\6\14\1\0\5\12\2\0\5\12\4\0\126\12\2\0\2\14"+
    "\2\0\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12"+
    "\21\0\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12"+
    "\103\0\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12"+
    "\1\14\4\0\12\14\1\0\31\12\7\0\1\14\120\12\2\14\45\0"+
    "\11\12\2\0\147\12\2\0\4\12\1\0\4\12\14\0\13\12\115\0"+
    "\12\12\1\14\3\12\1\14\4\12\1\14\27\12\5\14\20\0\1\12"+
    "\7\0\64\12\14\0\2\14\62\12\21\14\13\0\12\14\6\0\22\14"+
    "\6\12\3\0\1\12\4\0\12\14\34\12\10\14\2\0\27\12\15\14"+
    "\14\0\35\12\3\0\4\14\57\12\16\14\16\0\1\12\12\14\46\0"+
    "\51\12\16\14\11\0\3\12\1\14\10\12\2\14\2\0\12\14\6\0"+
    "\27\12\3\0\1\12\1\14\4\0\60\12\1\14\1\12\3\14\2\12"+
    "\2\14\5\12\2\14\1\12\1\14\1\12\30\0\3\12\2\0\13\12"+
    "\5\14\2\0\3\12\2\14\12\0\6\12\2\0\6\12\2\0\6\12"+
    "\11\0\7\12\1\0\7\12\221\0\43\12\10\14\1\0\2\14\2\0"+
    "\12\14\6\0\u2ba4\12\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0"+
    "\152\12\46\0\7\12\14\0\5\12\5\0\1\12\1\14\12\12\1\0"+
    "\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0"+
    "\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\15\12\3\0"+
    "\20\14\20\0\7\14\14\0\2\12\30\0\3\12\31\0\1\12\6\0"+
    "\5\12\1\0\207\12\2\0\1\14\4\0\1\12\13\0\12\14\7\0"+
    "\32\12\4\0\1\12\1\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\3\0\2\12\3\0\2\12\22\0"+
    "\3\14\4\0\14\12\1\0\32\12\1\0\23\12\1\0\2\12\1\0"+
    "\17\12\2\0\16\12\42\0\173\12\105\0\65\12\210\0\1\14\202\0"+
    "\35\12\3\0\61\12\57\0\37\12\21\0\33\12\65\0\36\12\2\0"+
    "\44\12\4\0\10\12\1\0\5\12\52\0\236\12\2\0\12\14\u0356\0"+
    "\6\12\2\0\1\12\1\0\54\12\1\0\2\12\3\0\1\12\2\0"+
    "\27\12\252\0\26\12\12\0\32\12\106\0\70\12\6\0\2\12\100\0"+
    "\1\12\3\14\1\0\2\14\5\0\4\14\4\12\1\0\3\12\1\0"+
    "\33\12\4\0\3\14\4\0\1\14\40\0\35\12\203\0\66\12\12\0"+
    "\26\12\12\0\23\12\215\0\111\12\u03b7\0\3\14\65\12\17\14\37\0"+
    "\12\14\20\0\3\14\55\12\13\14\2\0\1\14\22\0\31\12\7\0"+
    "\12\14\6\0\3\14\44\12\16\14\1\0\12\14\100\0\3\14\60\12"+
    "\16\14\4\12\13\0\12\14\u04a6\0\53\12\15\14\10\0\12\14\u0936\0"+
    "\u036f\12\221\0\143\12\u0b9d\0\u042f\12\u33d1\0\u0239\12\u04c7\0\105\12\13\0"+
    "\1\12\56\14\20\0\4\14\15\12\u4060\0\2\12\u2163\0\5\14\3\0"+
    "\26\14\2\0\7\14\36\0\4\14\224\0\3\14\u01bb\0\125\12\1\0"+
    "\107\12\1\0\2\12\2\0\1\12\2\0\2\12\2\0\4\12\1\0"+
    "\14\12\1\0\1\12\1\0\7\12\1\0\101\12\1\0\4\12\2\0"+
    "\10\12\1\0\7\12\1\0\34\12\1\0\4\12\1\0\5\12\1\0"+
    "\1\12\3\0\7\12\1\0\u0154\12\2\0\31\12\1\0\31\12\1\0"+
    "\37\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12\1\0"+
    "\31\12\1\0\37\12\1\0\31\12\1\0\10\12\2\0\62\14\u1600\0"+
    "\4\12\1\0\33\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0"+
    "\12\12\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0"+
    "\4\12\1\0\4\12\1\0\1\12\1\0\12\12\1\0\21\12\5\0"+
    "\3\12\1\0\5\12\1\0\21\12\u1144\0\ua6d7\12\51\0\u1035\12\13\0"+
    "\336\12\u3fe2\0\u021e\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\14\36\0\140\14\200\0\360\14\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\1\1\4\1\1"+
    "\16\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\2\3\0\1\15\1\0\26\4\3\0\15\4"+
    "\1\16\1\4\1\17\10\4\1\0\1\2\1\0\2\4"+
    "\1\20\1\21\6\4\1\22\4\4\1\23\1\4\1\24"+
    "\1\25\3\4\1\0\1\4\1\26\1\27\1\30\1\4"+
    "\1\31\1\4\1\32\1\33\1\4\1\34\1\4\1\35"+
    "\1\0\3\4\1\0\1\36\1\4\1\37\1\40\1\41"+
    "\2\0\1\42\1\43\1\4\1\44\1\4\3\0\1\45"+
    "\1\4\4\0\1\4\3\0\1\46\1\47\2\0\1\50"+
    "\2\0\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\u0100\0\u0100\0\u0140"+
    "\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\u0580\0\u05c0\0\u0600\0\u01c0\0\100\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0"+
    "\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u0180\0\u1000\0\u0180\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u0c00\0\u1280\0\u12c0\0\u1300\0\u0180\0\u0180\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u0180\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u0180\0\u15c0\0\u1600\0\u0180\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u0180\0\u0180\0\u0180\0\u1780\0\u0180\0\u17c0"+
    "\0\u0180\0\u0180\0\u1800\0\u0180\0\u1840\0\u0180\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u0180\0\u19c0\0\u1a00\0\u0180\0\u0180"+
    "\0\u1a40\0\u1a80\0\u0180\0\u0180\0\u1ac0\0\100\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u0180\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\100\0\u0180\0\u1e40\0\u1e80"+
    "\0\100\0\u1ec0\0\u1f00\0\100\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\2\11\1\2\1\12\2\2\1\4\1\2\2\13"+
    "\3\11\2\14\2\15\2\16\1\11\1\17\1\20\1\21"+
    "\2\11\2\22\2\23\4\11\2\24\1\25\4\11\2\26"+
    "\2\27\2\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\102\0\1\4\101\0\1\41\1\42\101\0"+
    "\1\7\77\0\1\43\1\0\1\43\1\0\1\43\2\0"+
    "\1\43\4\0\2\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\5\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\2\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\17\0\1\11\2\0\3\11\4\0\47\11\10\0"+
    "\15\44\1\45\1\46\61\44\7\0\1\11\2\0\3\11"+
    "\4\0\3\11\1\47\43\11\17\0\1\11\2\0\3\11"+
    "\4\0\22\11\2\50\23\11\17\0\1\11\2\0\3\11"+
    "\4\0\22\11\2\51\23\11\17\0\1\11\2\0\3\11"+
    "\4\0\1\11\2\52\1\11\2\53\41\11\17\0\1\11"+
    "\2\0\3\11\4\0\16\11\1\54\3\11\2\55\2\56"+
    "\4\11\2\57\13\11\17\0\1\11\2\0\3\11\4\0"+
    "\32\11\2\60\13\11\17\0\1\11\2\0\3\11\4\0"+
    "\3\11\1\61\43\11\17\0\1\11\2\0\3\11\4\0"+
    "\3\11\1\62\2\63\2\64\37\11\17\0\1\11\2\0"+
    "\3\11\4\0\22\11\2\65\23\11\17\0\1\11\2\0"+
    "\3\11\4\0\3\11\1\66\43\11\17\0\1\11\2\0"+
    "\3\11\4\0\16\11\1\67\5\11\2\70\21\11\17\0"+
    "\1\11\2\0\3\11\4\0\4\11\2\71\20\11\2\72"+
    "\17\11\17\0\1\11\2\0\3\11\4\0\3\11\1\73"+
    "\43\11\17\0\1\11\2\0\3\11\4\0\16\11\1\74"+
    "\30\11\10\0\1\41\1\3\1\4\75\41\5\75\1\76"+
    "\72\75\7\0\1\77\1\0\1\77\1\0\1\77\2\0"+
    "\1\77\4\0\2\77\1\0\1\77\1\0\1\77\1\0"+
    "\1\77\1\0\5\77\1\0\1\77\1\0\1\77\1\0"+
    "\1\77\1\0\1\77\1\0\1\77\1\0\2\77\1\0"+
    "\1\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0"+
    "\1\77\10\0\1\44\2\0\14\44\3\0\56\44\7\0"+
    "\1\11\2\0\3\11\4\0\4\11\2\100\41\11\17\0"+
    "\1\11\2\0\3\11\4\0\3\11\1\101\12\11\1\102"+
    "\30\11\17\0\1\11\2\0\3\11\4\0\26\11\2\103"+
    "\17\11\17\0\1\11\2\0\3\11\4\0\4\11\2\104"+
    "\41\11\17\0\1\11\2\0\3\11\4\0\14\11\1\105"+
    "\32\11\17\0\1\11\2\0\3\11\4\0\17\11\1\106"+
    "\27\11\17\0\1\11\2\0\3\11\4\0\24\11\2\107"+
    "\21\11\17\0\1\11\2\0\3\11\4\0\22\11\2\110"+
    "\23\11\17\0\1\11\2\0\3\11\4\0\16\11\1\111"+
    "\7\11\2\112\17\11\17\0\1\11\2\0\3\11\4\0"+
    "\4\11\2\113\41\11\17\0\1\11\2\0\3\11\4\0"+
    "\30\11\2\114\15\11\17\0\1\11\2\0\3\11\4\0"+
    "\14\11\1\115\32\11\17\0\1\11\2\0\3\11\4\0"+
    "\6\11\2\116\37\11\17\0\1\11\2\0\3\11\4\0"+
    "\15\11\1\117\31\11\17\0\1\11\2\0\3\11\4\0"+
    "\16\11\1\120\30\11\17\0\1\11\2\0\3\11\4\0"+
    "\34\11\1\121\12\11\17\0\1\11\2\0\3\11\4\0"+
    "\32\11\2\122\13\11\17\0\1\11\2\0\3\11\4\0"+
    "\30\11\2\123\15\11\17\0\1\11\2\0\3\11\4\0"+
    "\30\11\2\124\15\11\17\0\1\11\2\0\3\11\4\0"+
    "\22\11\2\125\23\11\17\0\1\11\2\0\3\11\4\0"+
    "\32\11\2\126\13\11\17\0\1\11\2\0\3\11\4\0"+
    "\6\11\2\127\37\11\10\0\5\75\1\130\76\75\1\131"+
    "\1\130\72\75\7\0\1\132\1\0\1\132\1\0\1\132"+
    "\2\0\1\132\4\0\2\132\1\0\1\132\1\0\1\132"+
    "\1\0\1\132\1\0\5\132\1\0\1\132\1\0\1\132"+
    "\1\0\1\132\1\0\1\132\1\0\1\132\1\0\2\132"+
    "\1\0\1\132\1\0\1\132\1\0\1\132\1\0\1\132"+
    "\1\0\1\132\17\0\1\11\2\0\3\11\4\0\6\11"+
    "\2\133\37\11\17\0\1\11\2\0\3\11\4\0\3\11"+
    "\1\134\43\11\17\0\1\11\2\0\3\11\4\0\43\11"+
    "\2\135\2\11\17\0\1\11\2\0\3\11\4\0\3\11"+
    "\1\136\43\11\17\0\1\11\2\0\3\11\4\0\10\11"+
    "\2\137\35\11\17\0\1\11\2\0\3\11\4\0\10\11"+
    "\2\140\35\11\17\0\1\11\2\0\3\11\4\0\20\11"+
    "\2\141\25\11\17\0\1\11\2\0\3\11\4\0\12\11"+
    "\2\142\33\11\17\0\1\11\2\0\3\11\4\0\14\11"+
    "\1\143\32\11\17\0\1\11\2\0\3\11\4\0\17\11"+
    "\1\144\27\11\17\0\1\11\2\0\3\11\4\0\3\11"+
    "\1\145\43\11\17\0\1\11\2\0\3\11\4\0\6\11"+
    "\2\146\37\11\17\0\1\11\2\0\3\11\4\0\10\11"+
    "\2\147\35\11\17\0\1\11\2\0\3\11\4\0\1\11"+
    "\2\150\44\11\17\0\1\11\2\0\3\11\4\0\30\11"+
    "\2\151\15\11\17\0\1\11\2\0\3\11\4\0\10\11"+
    "\2\152\35\11\17\0\1\11\2\0\3\11\4\0\35\11"+
    "\2\153\10\11\17\0\1\11\2\0\3\11\4\0\10\11"+
    "\2\154\35\11\17\0\1\11\2\0\3\11\4\0\20\11"+
    "\2\155\25\11\17\0\1\11\2\0\3\11\4\0\41\11"+
    "\2\156\4\11\17\0\1\11\2\0\3\11\4\0\32\11"+
    "\2\157\13\11\17\0\1\11\2\0\3\11\4\0\3\11"+
    "\1\160\43\11\10\0\4\75\1\4\1\130\72\75\7\0"+
    "\1\161\1\0\1\161\1\0\1\161\2\0\1\161\4\0"+
    "\2\161\1\0\1\161\1\0\1\161\1\0\1\161\1\0"+
    "\5\161\1\0\1\161\1\0\1\161\1\0\1\161\1\0"+
    "\1\161\1\0\1\161\1\0\2\161\1\0\1\161\1\0"+
    "\1\161\1\0\1\161\1\0\1\161\1\0\1\161\17\0"+
    "\1\11\2\0\3\11\4\0\1\11\2\162\44\11\17\0"+
    "\1\11\2\0\3\11\4\0\30\11\2\163\15\11\17\0"+
    "\1\11\2\0\3\11\4\0\3\11\1\164\43\11\17\0"+
    "\1\11\2\0\3\11\4\0\1\11\2\165\44\11\17\0"+
    "\1\11\2\0\3\11\4\0\6\11\2\166\37\11\17\0"+
    "\1\11\2\0\3\11\4\0\30\11\2\167\15\11\17\0"+
    "\1\11\2\0\3\11\4\0\3\11\1\170\43\11\17\0"+
    "\1\11\2\0\3\11\4\0\20\11\2\171\25\11\17\0"+
    "\1\11\2\0\3\11\4\0\30\11\2\172\15\11\17\0"+
    "\1\11\2\0\3\11\4\0\3\11\1\173\43\11\17\0"+
    "\1\11\2\0\3\11\4\0\10\11\2\174\35\11\17\0"+
    "\1\11\2\0\3\11\4\0\6\11\2\175\37\11\17\0"+
    "\1\11\2\0\3\11\4\0\3\11\1\176\43\11\16\0"+
    "\1\177\1\11\2\0\3\11\4\0\47\11\17\0\1\11"+
    "\2\0\3\11\4\0\32\11\2\200\13\11\17\0\1\11"+
    "\2\0\3\11\4\0\24\11\2\201\21\11\17\0\1\11"+
    "\2\0\3\11\4\0\30\11\2\202\15\11\17\0\1\203"+
    "\1\0\1\203\1\0\1\203\2\0\1\203\4\0\2\203"+
    "\1\0\1\203\1\0\1\203\1\0\1\203\1\0\5\203"+
    "\1\0\1\203\1\0\1\203\1\0\1\203\1\0\1\203"+
    "\1\0\1\203\1\0\2\203\1\0\1\203\1\0\1\203"+
    "\1\0\1\203\1\0\1\203\1\0\1\203\17\0\1\11"+
    "\2\0\3\11\4\0\10\11\2\204\35\11\17\0\1\11"+
    "\2\0\3\11\4\0\22\11\2\205\23\11\17\0\1\11"+
    "\2\0\3\11\4\0\22\11\2\206\23\11\17\0\1\11"+
    "\2\0\3\11\4\0\22\11\2\207\23\11\17\0\1\11"+
    "\2\0\3\11\4\0\3\11\1\210\43\11\50\0\1\211"+
    "\15\0\2\212\27\0\1\11\2\0\3\11\4\0\3\11"+
    "\1\213\43\11\17\0\1\11\2\0\3\11\4\0\12\11"+
    "\2\214\33\11\17\0\1\11\2\0\3\11\4\0\10\11"+
    "\2\215\35\11\17\0\1\216\1\0\1\216\1\0\1\216"+
    "\2\0\1\216\4\0\2\216\1\0\1\216\1\0\1\216"+
    "\1\0\1\216\1\0\5\216\1\0\1\216\1\0\1\216"+
    "\1\0\1\216\1\0\1\216\1\0\1\216\1\0\2\216"+
    "\1\0\1\216\1\0\1\216\1\0\1\216\1\0\1\216"+
    "\1\0\1\216\17\0\1\11\2\0\3\11\4\0\24\11"+
    "\2\217\21\11\16\0\1\220\1\11\2\0\3\11\4\0"+
    "\47\11\55\0\2\221\56\0\2\222\60\0\1\11\2\0"+
    "\3\11\4\0\16\11\1\223\30\11\17\0\1\11\2\0"+
    "\3\11\4\0\26\11\2\224\17\11\43\0\2\225\3\0"+
    "\1\226\112\0\2\227\103\0\2\230\25\0\1\11\2\0"+
    "\3\11\4\0\30\11\2\231\15\11\35\0\2\232\116\0"+
    "\2\233\76\0\2\234\55\0\1\235\62\0\1\11\2\0"+
    "\3\11\4\0\14\11\1\236\32\11\45\0\1\237\115\0"+
    "\2\240\66\0\2\241\64\0\2\242\112\0\2\243\53\0"+
    "\2\244\117\0\2\245\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\24\1\10\11\1\1\3\0"+
    "\1\11\1\0\26\1\3\0\30\1\1\0\1\1\1\0"+
    "\26\1\1\0\15\1\1\0\3\1\1\0\5\1\2\0"+
    "\3\1\1\11\1\1\3\0\2\1\4\0\1\1\3\0"+
    "\1\11\1\1\2\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private String path;

    StringBuilder stringBuilder = new StringBuilder();

    //Helper functions to return multiple java_cup.runtime.Symbol to the parser
    private Symbol symbol(int type){
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }

    public String getPath(){
        return path;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) throws IllegalArgumentException {
      //CHAPUZ MAXIMO se utilizo in en vez de zzReader porque el codigo dentro de init es copiado antes de hacer this.zzReader = in
    if(!(in instanceof MyFileReader)){
        throw new IllegalArgumentException("Reader in must be an instance of MyFileReader");
    }
    MyFileReader tmp = (MyFileReader) in;
    path = tmp.getPath();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2906) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { MyError error = new MyError(MyErrorType.LEXIC, Phase.CSS, path, yyline + 1, yycolumn + 1, "Illegal character <"+ yytext()+">");
    MySystem.Console.println((MyError)error);
    //Pasar a consola
    //MyGui.MainJFrame.logln(error);
            } 
            // fall through
          case 43: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 44: break;
          case 3: 
            { return symbol(sym.NUMBER_LITERAL, Integer.valueOf(yytext()));
            } 
            // fall through
          case 45: break;
          case 4: 
            { return symbol(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 46: break;
          case 5: 
            { return symbol(sym.O_PAREN);
            } 
            // fall through
          case 47: break;
          case 6: 
            { return symbol(sym.C_PAREN);
            } 
            // fall through
          case 48: break;
          case 7: 
            { return symbol(sym.SEMICOLON);
            } 
            // fall through
          case 49: break;
          case 8: 
            { return symbol(sym.COMMA);
            } 
            // fall through
          case 50: break;
          case 9: 
            { return symbol(sym.O_CURLY);
            } 
            // fall through
          case 51: break;
          case 10: 
            { return symbol(sym.C_CURLY);
            } 
            // fall through
          case 52: break;
          case 11: 
            { return symbol(sym.DOT);
            } 
            // fall through
          case 53: break;
          case 12: 
            { return symbol(sym.COLON);
            } 
            // fall through
          case 54: break;
          case 13: 
            { return symbol(sym.STRING_LITERAL, yytext().replace("'", ""));
            } 
            // fall through
          case 55: break;
          case 14: 
            { return symbol(sym.COLOR_NAME, new Integer(0xff0000));
            } 
            // fall through
          case 56: break;
          case 15: 
            { return symbol(sym.RGB);
            } 
            // fall through
          case 57: break;
          case 16: 
            { return symbol(sym.COLOR_NAME, new Integer(Color.gray.getRGB()));
            } 
            // fall through
          case 58: break;
          case 17: 
            { return symbol(sym.BOOL_LITERAL, new Boolean(true));
            } 
            // fall through
          case 59: break;
          case 18: 
            { return symbol(sym.COLOR_NAME, new Integer(0x0000ff));
            } 
            // fall through
          case 60: break;
          case 19: 
            { return symbol(sym.ALIGN_LITERAL, new Integer(javax.swing.SwingConstants.LEFT));
            } 
            // fall through
          case 61: break;
          case 20: 
            { return symbol(sym.FONT);
            } 
            // fall through
          case 62: break;
          case 21: 
            { return symbol(sym.COLOR_NAME, new Integer(Color.pink.getRGB()));
            } 
            // fall through
          case 63: break;
          case 22: 
            { return symbol(sym.COLOR_NAME, new Integer(0x00ff00));
            } 
            // fall through
          case 64: break;
          case 23: 
            { return symbol(sym.COLOR_NAME, new Integer(Color.white.getRGB()));
            } 
            // fall through
          case 65: break;
          case 24: 
            { return symbol(sym.WIDTH);
            } 
            // fall through
          case 66: break;
          case 25: 
            { return symbol(sym.COLOR_NAME, new Integer(0xa52a2a));
            } 
            // fall through
          case 67: break;
          case 26: 
            { return symbol(sym.COLOR_NAME, new Integer(Color.black.getRGB()));
            } 
            // fall through
          case 68: break;
          case 27: 
            { return symbol(sym.ALIGN);
            } 
            // fall through
          case 69: break;
          case 28: 
            { return symbol(sym.ALIGN_LITERAL, new Integer(javax.swing.SwingConstants.RIGHT));
            } 
            // fall through
          case 70: break;
          case 29: 
            { return symbol(sym.BOOL_LITERAL, new Boolean(false));
            } 
            // fall through
          case 71: break;
          case 30: 
            { return symbol(sym.HEIGHT);
            } 
            // fall through
          case 72: break;
          case 31: 
            { return symbol(sym.BORDER);
            } 
            // fall through
          case 73: break;
          case 32: 
            { return symbol(sym.ALIGN_LITERAL, new Integer(javax.swing.SwingConstants.CENTER));
            } 
            // fall through
          case 74: break;
          case 33: 
            { return symbol(sym.COLOR_NAME, new Integer(Color.orange.getRGB()));
            } 
            // fall through
          case 75: break;
          case 34: 
            { return symbol(sym.COLOR_NAME, new Integer(0x800080));
            } 
            // fall through
          case 76: break;
          case 35: 
            { return symbol(sym.COLOR_NAME, new Integer(Color.yellow.getRGB()));
            } 
            // fall through
          case 77: break;
          case 36: 
            { return symbol(sym.HEX_COLOR, Integer.parseInt(yytext().substring(1).toLowerCase(), 16));
            } 
            // fall through
          case 78: break;
          case 37: 
            { return symbol(sym.COLOR_NAME, new Integer(Color.magenta.getRGB()));
            } 
            // fall through
          case 79: break;
          case 38: 
            { return symbol(sym.FONT_SIZE);
            } 
            // fall through
          case 80: break;
          case 39: 
            { return symbol(sym.BACKGROUND);
            } 
            // fall through
          case 81: break;
          case 40: 
            { return symbol(sym.FONT_COLOR);
            } 
            // fall through
          case 82: break;
          case 41: 
            { return symbol(sym.BORDER_WIDTH);
            } 
            // fall through
          case 83: break;
          case 42: 
            { return symbol(sym.BORDER_COLOR);
            } 
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
