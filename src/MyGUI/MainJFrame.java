/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MyGUI;

import FileManager.FileHelper;
import FileManager.UfeFiles;
import MyObjects.MyError;
import UfeRuntime.MyCompiler;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alvarez
 */
public class MainJFrame extends javax.swing.JFrame {
    /**
     * Si esta en null es porque no se tiene ningun proyecto abierto
     */
    private File projectFile;
    private MyCompiler ufeCompiler;
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        lblProjectName = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        myConsole = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        symTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("[Compi1]Proyecto1");
        setMinimumSize(new java.awt.Dimension(700, 500));

        jLabel1.setText("Proyecto actual: ");

        lblProjectName.setText("null");

        myConsole.setEditable(false);
        myConsole.setBackground(new java.awt.Color(0, 0, 0));
        myConsole.setColumns(20);
        myConsole.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        myConsole.setForeground(new java.awt.Color(0, 255, 0));
        myConsole.setRows(5);
        jScrollPane3.setViewportView(myConsole);

        jTabbedPane1.addTab("Console", jScrollPane3);

        symTable.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        symTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        symTable.setEnabled(false);
        jScrollPane1.setViewportView(symTable);

        jTabbedPane1.addTab("Tabla de simbolos", jScrollPane1);

        jMenu1.setText("Archivo");

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Nuevo proyecto");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Abrir proyecto");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Cerrar proyecto");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem11);
        jMenu1.add(jSeparator1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Nuevo archivo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Abrir archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Guardar como");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Cerrar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Run");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Compilar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Tools");

        jMenu5.setText("Consola");

        jMenuItem9.setText("Clear");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenu4.add(jMenu5);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Reportes");

        jMenuItem7.setText("HTML");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblProjectName)
                        .addGap(0, 572, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblProjectName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        openFileInEditor();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        newFileInEditor();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        closeTab();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        saveTab();
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        saveTabAs();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        if (projectFile == null) {
            JOptionPane.showMessageDialog(this, "Abrir o crear proyecto antes");
            return;
        }
        if (ufeCompiler == null) {
            ufeCompiler = new MyCompiler();
        }
        
        //Guarda todas las pestannas abiertas:
        int compCnt = tabbedPane.getTabCount();
        for (int i = 0; i < compCnt; i++) {
            saveTab(i);
        }
        
        JFrame jframe = ufeCompiler.compile(projectFile.getPath() + File.separator + UfeFiles.MAIN);
        if (jframe == null) {
            return;
        }
        jframe.setVisible(true);
        String[] columnNames = {""};
        symTable.setModel(new DefaultTableModel(ufeCompiler.getTableData(), ufeCompiler.getColumnNames()));
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        String htmlCnt = MySystem.Console.getHtmlReport();
        String url = "reportes" + File.separator + "ReporteDeErrorres.html";
        try {
            FileHelper.saveFile(url, htmlCnt);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        File htmlFile = new File(url);
        try {
            Desktop.getDesktop().browse(htmlFile.toURI());
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        int n = JOptionPane.showConfirmDialog(this, "Desea eliminar todo el texto contenido en la consola? "
                + "\nEsta accion es irreversible.",
                                      "Inane warning", JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            myConsole.setText("");
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        newProject();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        openProjectInEditor();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        closeProject();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

//    
//    public static void log(String s){
//        myLogger.setText(myLogger.getText() + s);
//    }
//    
//    public static void logln(String s){
//        myLogger.setText(myLogger.getText() + "\n" + s);
//    }
    
//    public static void log(MyError info){
//        MY_ERRORS.add(info);
//        String s = "\t[-" + info.phase.toString() + "-]\n";
//        s += "Ocurrio un error de tipo: <" + info.type.toString() + ">";
//        s += "\nEn la linea: " + info.line + ". Columna: " + info.column;
//        s += "\n" + info.msg;
//        myLogger.setText(myLogger.getText() + s);
//    }
//    
//    public static void logln(MyError info){
//        MY_ERRORS.add(info);
//        String s = "\t[-" + info.phase.toString() + "-]\n";
//        s += "Ocurrio un error de tipo: <" + info.type.toString() + ">";
//        s += "\nEn la linea: " + info.line + ". Columna: " + info.column;
//        s += "\n" + info.msg;
//        myLogger.setText(myLogger.getText() + "\n" + s);
//    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblProjectName;
    public static javax.swing.JTextArea myConsole;
    private javax.swing.JTable symTable;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    private void newProject(){
        if (!closeProject()) {
            return;
        }
        String nombre = newProjectJOptionPane();
        if (nombre == null) {
            return;
        }
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        f.showSaveDialog(null);
        File file = f.getSelectedFile();
        try {
            UfeFiles.newProject(file, nombre);
        } catch (IOException ex) {
            MySystem.Console.println(ex.getMessage());
            MySystem.Console.println("error al tratar de crear el nuevo proyecto: " + nombre);
        }
        openProjectInEditor(file.getPath() + File.separator + nombre);
    }
    
    private void openProjectInEditor(){
        if (!closeProject()) {
            return;
        }
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        f.showSaveDialog(null);
        File file = f.getSelectedFile();
        if (file == null) {
            return;
        }
        if (!UfeFiles.isFileProject(file)) {
            JOptionPane.showMessageDialog(this, "La carpeta: " + file.getPath() + " no es una proyecto ufe valido.");
            return;
        }
        openProjectInEditor(file);
    }
    
    private void openProjectInEditor(String path){
        openProjectInEditor(new File(path));
    }
    
    private void openProjectInEditor(File file){
        projectFile = file;
        lblProjectName.setText(file.getName());
        for (String DEFAULT_FILE : UfeFiles.DEFAULT_FILES) {
            openFileInEditor(file + File.separator + DEFAULT_FILE);
        }
    }
    
    private void newFileInEditor(){
        if (projectFile == null) {
            JOptionPane.showMessageDialog(this, "Abrir o crear proyecto antes");
            return;
        }
        //Request el nombre, el tipo y la carpeta donde se va a guardar el archivo
        String nombre = newFileJOptionPane();
        if (nombre == null) {
            return;
        }
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        f.setFileFilter(new FileNameExtensionFilter("archivo ufe", "ufe", "css", "html"));
        f.setCurrentDirectory(projectFile);
        f.showSaveDialog(null);
        File file = f.getSelectedFile();
        if (file == null) {
            return;
        }
        try {
            file.createNewFile();
        } catch (IOException ex) {
            MySystem.Console.println("error al tratar de crear el nuevo archivo: " + nombre);
        }
        openFileInEditor(file);
    }
    
    private void openFileInEditor(){
        if (projectFile == null) {
            JOptionPane.showMessageDialog(this, "Abrir o crear proyecto antes");
            return;
        }
        JFileChooser f = new JFileChooser();
        f.setFileFilter(new FileNameExtensionFilter("archivo ufe", "ufe", "css", "html"));
        f.showSaveDialog(null);
        f.setCurrentDirectory(projectFile);
        File file = f.getSelectedFile();
        if (file == null) {
            return;
        }
        String content;
        try {
            content = FileHelper.readFile(file);
        } catch (IOException ex) {
            MySystem.Console.println("Error al abrir el archivo: " + file.getPath());
            return;
        }
        openFileInEditor(file);
    }
    
    /**
     * Tira exception no reportada si File no es valido
     * @param file
     */
    private void openFileInEditor(File file){
        String content;
        try {
            content = FileHelper.readFile(file);
        } catch (IOException ex) {
            MySystem.Console.println("Error al abrir el archivo: " + file.getPath());
            return;
        }
        JTextPane textPane = new JTextPane();
        textPane.setText(content);
        MyScrollPane scrollPane = new MyScrollPane(textPane, file, file.getName());
        TextLineNumber tln = new TextLineNumber(textPane);
        scrollPane.setRowHeaderView( tln );
        int index = tabbedPane.getTabCount();
        tabbedPane.addTab(file.getName(), scrollPane);
        tabbedPane.setToolTipTextAt(index, file.getPath());
    }
    
    /**
     * Tira exception no reportada si File no es valido
     * @param path
     */
    private void openFileInEditor(String path){
        File file = new File(path);
        openFileInEditor(file);
    }
    
    private void closeTab(){
        int index = tabbedPane.getSelectedIndex();
        closeTab(index);
    }
    
    private void closeTab(int index){
        if (index < 0) {
            return;
        }
        tabbedPane.remove(index);
    }
    
    private void saveTab(){
        int index = tabbedPane.getSelectedIndex();
        saveTab(index);
    }
    
    private void saveTab(int index){
        if (index < 0) {
            return;
        }
        MyScrollPane pane = (MyScrollPane) tabbedPane.getComponent(index);
        File file = pane.file;
        String nombre = pane.nombre;
        String content = pane.textPane.getText();
        
        try {
            FileHelper.saveFile(file, content);
            //MySystem.Console.println("Archivo: " + nombre + " guardado");
        } catch (IOException ex) {
            MySystem.Console.println("Error al guardar: " + file.getPath());
//            logln(new MyError("Error al tratar de guardar el archivo: " + nombre + "\n" + ex.getMessage()));
        }
    }
    
    private void saveTabAs(){
        int index = tabbedPane.getSelectedIndex();
        saveTabAs(index);
    }
    
    private void saveTabAs(int index){
        if (index < 0) {
            return;
        }
        MyScrollPane pane = (MyScrollPane) tabbedPane.getComponent(index);
        String nombre = pane.nombre;
        String content = pane.textPane.getText();
        
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        f.setCurrentDirectory(projectFile);
        f.showSaveDialog(null);
        File file = f.getSelectedFile();
        if (file == null) {
            return;
        }
        try {
            FileHelper.saveFile(file, nombre, content);
        } catch (IOException ex) {
            MySystem.Console.println("error al trat de crear el nuevo archivo: " + nombre);
        }
    }
    
    private boolean closeProject(){
        if (projectFile == null) {
            return true;
        }
        int reply = JOptionPane.showConfirmDialog(this, "Desea cerrar el proyecto: " + projectFile.getName() + " y todos sus archivos abiertos?", "Cerrar proyecto", JOptionPane.YES_NO_OPTION);
        if (reply != JOptionPane.YES_OPTION) {
            return false;
        }
        
        reply = JOptionPane.showConfirmDialog(this, "Desea guardar todos los archivos abiertos de proyecto: " + projectFile.getName(), "Cerrar proyecto", JOptionPane.YES_NO_OPTION);
        
        if (reply == JOptionPane.YES_OPTION) {
            while(tabbedPane.getTabCount() > 0){
                saveTab();
                closeTab();
            }
        }else{
            while(tabbedPane.getTabCount() > 0){
                closeTab();
            }
        }
        
        projectFile = null;
        lblProjectName.setText("null");
        return true;
    }
    
    /**
     * Despliega el JOptionPane para generar un nuevo proyecto y devuelbe el resultado
     * @return 
     */
    private String newProjectJOptionPane() {
        
        if (projectFile != null) {
            int reply = JOptionPane.showConfirmDialog(this, "El proyecto: " + projectFile.getName() + " esta abierto, desea cerrarlo?", "Ufe", JOptionPane.YES_NO_OPTION);
            if (reply != JOptionPane.YES_OPTION) {
                return null;
            }
        }
        
        return JOptionPane.showInputDialog(this, "Nombre del nuevo proyecto:");
    }
    
    /**
     * Despliega el JOptionPane para generar un nuevo archivo y devuelbe el resultado
     * @return 
     */ 
    private String newFileJOptionPane(){
        String[] types= {"ufe", "css","html"};
        JComboBox jcb = new JComboBox(types);
        jcb.setEditable(true);
        
        JTextField txtField = new JTextField("NuevoArchivo");
        JComboBox jcTypes = new JComboBox(types);
        JButton jb = new JButton("Ok");

        txtField.setEditable(true);
        jcTypes.setEditable(true);

        //create a JOptionPane
        Object[] options = new Object[] {};
        JOptionPane jop = new JOptionPane("Inserte el nombre y tipo de archivo",
                                        JOptionPane.QUESTION_MESSAGE,
                                        JOptionPane.DEFAULT_OPTION,
                                        null,options, null);

        //add combos to JOptionPane
        jop.add(txtField);
        jop.add(jcTypes);
        
        
        //create a JDialog and add JOptionPane to it 
        JDialog diag = new JDialog();
        jb.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                diag.setVisible(false);
            }
        });
        jop.add(jb);
        diag.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        diag.getContentPane().add(jop);
        diag.pack();
        diag.setLocationRelativeTo(null);
        diag.setVisible(true);
        
        return txtField.getText() + "." + (String) jcTypes.getSelectedItem();
    }
}
